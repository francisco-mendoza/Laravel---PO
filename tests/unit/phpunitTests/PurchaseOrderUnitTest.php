<?php

use Illuminate\Http\Request;

use GuzzleHttp\Client;

use App\Http\Controllers\PurchaseOrderController;
use App\Models\User;
use App\Models\Area;
use App\Models\Contract;
use App\Models\PurchaseOrder;
use App\Models\PurchaseOrderDetail;
use App\Models\Provider;
use App\Models\AreasBudget;
use App\Models\AccountBudget;
use App\Models\AccountContract;
use App\Models\InvoicesOrders;
use App\Models\Invoice;

//include "tests/_support/Helper/MailTestHelper.php";
use Helper\MailTestHelper;

//include "tests/_support/Page/TestData.php";
use Page\TestData;



class PurchaseOrderUnitTest extends TestCase
{
    /** @var  PurchaseOrderController */
    protected $controller;

    /** @var  Area */
    protected $area;

    protected $parametersDetail;

    /** @var  Request */
    protected $request;


    /** @var  Contract */
    protected $contract;

    public $purchaseOrderFields;

    protected $providerFields;

   

    /** @var  MailTestHelper */
    protected $mail;


    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        //Setear usuario
        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        //Inicializar el controlador a probar
        $this->controller = new PurchaseOrderController();

        //Mocks necesarios en varias pruebas
        $this->area = Mockery::mock(Area::class);
        $this->area->shouldReceive('getAttribute')->with('id_area')->andReturn(1);
        $this->area->shouldReceive('getAttribute')->with('short_name')->andReturn('TEC');

        $this->contract = Mockery::mock(Contract::class);
        $this->contract->shouldReceive('getAttribute')->with('id_contract')->andReturn(22);

        //Parámetros mínimos del request
        $this->resetRequest();

        //Data de prueba
        $this->parametersDetail = TestData::purchaseOrderDetailFields;
        $this->purchaseOrderFields = TestData::purchaseOrderFields;
        $this->providerFields = TestData::Provider;


        
    }

    public function resetRequest(){
        //Parámetros mínimos del request
        $this->request = new Request();
        $this->request["payment_condition"] = 1;
        $this->request["payment_method"] = 1;
        $this->request["currency"] = 2;
    }

    public function tearDown()
    {
        Mockery::close();
        Session::clear();
    }

    public function testGetFolioName(){

        $today = getdate();

        $name = $this->controller->getFolioName($this->area);

        verify($name)->notEmpty();
        verify($name)->contains('TEC');
        verify($name)->contains(strval($today['year']));
        verify($name)->contains(strval($today['mon']));
        verify($name)->contains(strval($today['mday']));
        verify($name)->contains(strval($today['hours']));
        verify($name)->contains(strval($today['minutes']));
        verify($name)->contains(strval($today['seconds']));
        verify($name)->contains('_');

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetFolioName "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetPurchaseOrder(){


        $folio = $this->controller->getFolioName($this->area);

        /** @var \App\Models\PurchaseOrder $order */
        $order = $this->controller->createPurchaseOrder($this->request,$folio, $this->area, $this->contract);

        //Campos obligatorios
        verify($order->folio_number)->notNull();
        verify($order->id_area)->notNull();
        verify($order->id_contract)->notNull();
        verify($order->id_user)->notNull();

        //Valores
        verify($order->id_area)->equals(1);
        verify($order->id_contract)->equals(22);
        verify($order->order_state)->equals('Emitida'); //Estado por defecto
        verify($order->id_user)->equals(10);
        verify($order->folio_number)->equals($folio);
        verify($order->exchange_rate)->notNull();
        verify($order->exchange_rate)->equals(1);
        verify($order->total_price)->null();
        verify($order->total_iva_price)->null();

        $this->assertInstanceOf(PurchaseOrder::class,$order);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetPurchaseOrder "."\033[32m OK \033[0m ". "\n");

//        dd($order);

    }

    public function testGetForeignPurchaseOrder(){

        $this->request["currency"] = 3; //Dolar
        $folio = $this->controller->getFolioName($this->area);

        /** @var \App\Models\PurchaseOrder $order */
        $order = $this->controller->createPurchaseOrder($this->request,$folio, $this->area, $this->contract);

        //Campos obligatorios
        verify($order->folio_number)->notNull();
        verify($order->id_area)->notNull();
        verify($order->id_contract)->notNull();
        verify($order->id_user)->notNull();

        //Valores
        verify($order->id_area)->equals(1);
        verify($order->id_contract)->equals(22);
        verify($order->order_state)->equals('Emitida'); //Estado por defecto
        verify($order->id_user)->equals(10);
        verify($order->folio_number)->equals($folio);
        verify($order->exchange_rate)->notNull();
        verify($order->exchange_rate)->notEquals(1);
        verify($order->exchange_rate)->greaterOrEquals(500);
        verify($order->total_price)->null();
        verify($order->total_iva_price)->null();

        $this->assertInstanceOf(PurchaseOrder::class,$order);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetForeignPurchaseOrder "."\033[32m OK \033[0m ". "\n");

    }

    public function testCreatePurchaseOrderDetail(){

        //Agregar el contrato
        $contract = new Contract(TestData::contractFields);
        $contract->save();


        $folio = $this->controller->getFolioName($this->area);
        $orderNew = $order = $this->controller->createPurchaseOrder($this->request,$folio, $this->area, $contract);
        $random = rand(1,12); //Mes random
        $orderNew->folio_number = $folio . '_' . sprintf('%02d',$random);

        $orderNew->save();

        $accountBudget = Mockery::mock(AccountBudget::class);
        $accountBudget->shouldReceive('getAttribute')->with('account_code')->andReturn(1);

        $newDetailMock = Mockery::mock(PurchaseOrderDetail::class);
        $newDetailMock->shouldReceive('getAttribute')->with('quantity')->andReturn($this->parametersDetail['quantity']);
        $newDetailMock->shouldReceive('getAttribute')->with('description')->andReturn($this->parametersDetail['description']);
        $newDetailMock->shouldReceive('getAttribute')->with('price')->andReturn(2000);
        $newDetailMock->shouldReceive('getAttribute')->with('has_iva')->andReturn($this->parametersDetail['has_iva']);
        $newDetailMock->shouldReceive('getAttribute')->with('price_iva')->andReturn(2380);
        $newDetailMock->shouldReceive('getAttribute')->with('id_currency')->andReturn($this->parametersDetail['id_currency']);

        $arrayDetails = array();
        array_push($arrayDetails,$newDetailMock);

        /** @var PurchaseOrder $order */
        $order= $this->controller->createPurchaseOrderDetails($arrayDetails,$orderNew,$orderNew->folio_number,  $this->area, $accountBudget);


        verify($order->total_price)->equals($newDetailMock->price);
        verify($order->total_iva_price)->equals($newDetailMock->price_iva);


        $this->seeInDatabase('purchase_order_detail', $this->parametersDetail);

        //Eliminar datos de prueba
        $pddelete = PurchaseOrderDetail::findBy('id_purchase_order', $orderNew->folio_number);
        $pddelete->delete();
        $orderNew = PurchaseOrder::findBy('folio_number',$orderNew->folio_number);
        $orderNew->delete();
        $contract = Contract::findBy('id_contract', $contract->id_contract);
        $contract->delete();

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testCreatePurchaseOrderDetail "."\033[32m OK \033[0m " . "\n");

    }


    public function testCreatePurchaseOrderDetail_ValidatingBudgets(){

        $area= new Area(TestData::areaFields);
        $area->save();

        //Agregar el contrato
        $contract = new Contract(TestData::contractFields);
        $contract->save();

        $folio = $this->controller->getFolioName($this->area);
        $orderNew = $order = $this->controller->createPurchaseOrder($this->request,$folio, $area, $contract);
        $random = rand(1,12); //Mes random
        $orderNew->folio_number = $folio . '_' . sprintf('%02d',$random);

        $orderNew->save();

        $accountBudget = new AccountBudget(TestData::accountBudgetFields_1);
        $accountBudget->save();

        $areasBudget = new AreasBudget(TestData::areaBudgetFields);
        $areasBudget->save();

        $newDetailMock = Mockery::mock(PurchaseOrderDetail::class);
        $newDetailMock->shouldReceive('getAttribute')->with('quantity')->andReturn($this->parametersDetail['quantity']);
        $newDetailMock->shouldReceive('getAttribute')->with('description')->andReturn($this->parametersDetail['description']);
        $newDetailMock->shouldReceive('getAttribute')->with('price')->andReturn(2000);
        $newDetailMock->shouldReceive('getAttribute')->with('has_iva')->andReturn($this->parametersDetail['has_iva']);
        $newDetailMock->shouldReceive('getAttribute')->with('price_iva')->andReturn(2380);
        $newDetailMock->shouldReceive('getAttribute')->with('id_currency')->andReturn($this->parametersDetail['id_currency']);

        $arrayDetails = array();
        array_push($arrayDetails,$newDetailMock);

        /** @var PurchaseOrder $order */
        $order= $this->controller->createPurchaseOrderDetails($arrayDetails,$orderNew,$orderNew->folio_number,  $area, $accountBudget);

        verify($order->total_price)->equals($newDetailMock->price);
        verify($order->total_iva_price)->equals($newDetailMock->price_iva);


        $this->seeInDatabase('purchase_order_detail', $this->parametersDetail);

        $accountFields = TestData::accountBudgetFields_1;
        $accountFields['total_budget_available'] = floatval(TestData::accountBudgetFields_1['total_budget_available']) - 2000;
        $areaFIelds = TestData::areaBudgetFields;
        $areaFIelds['total_budget_available'] = floatval(TestData::areaBudgetFields['total_budget_available']) - 2000;

        $this->seeInDatabase('account_budget', $accountFields);
        $this->seeInDatabase('areas_budget', $areaFIelds);

        //Eliminar datos de prueba
        AccountBudget::deleteBudgets(TestData::areaFields['id_area']);
        AreasBudget::deleteBudgets(TestData::areaFields['id_area']);

        $pddelete = PurchaseOrderDetail::findBy('id_purchase_order', $orderNew->folio_number);
        $pddelete->delete();
        $orderNew = PurchaseOrder::findBy('folio_number',$orderNew->folio_number);
        $orderNew->delete();

        $area = Area::find(TestData::areaFields['id_area']);
        $area->delete();
        $contract = Contract::findBy('id_contract', $contract->id_contract);
        $contract->delete();

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testCreatePurchaseOrderDetail_ValidatingBudgets "."\033[32m OK \033[0m " . "\n");

    }


    public function testFailValidatePurchaseOrderWithoutNameProvider(){

        $this->expectException(\Illuminate\Validation\ValidationException::class);
        $this->controller->validateFormPurchaseOrder($this->request);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testFailValidatePurchaseOrderWithoutNameProvider "."\033[32m OK \033[0m ". "\n");
        
    }

    public function testFailValidatePurchaseOrderWithoutPaymentCondition(){

        $this->request["name_provider"] = "Provider"; //Llenar el último dato necesario
        $this->request["payment_condition"] = ""; //Vaciar elemento de la lista
        $this->expectException(\Illuminate\Validation\ValidationException::class);
        $this->controller->validateFormPurchaseOrder($this->request);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testFailValidatePurchaseOrderWithoutPaymentCondition "."\033[32m OK \033[0m ". "\n");

    }

    public function testFailValidatePurchaseOrderWithoutPaymentMethod(){

        $this->request["name_provider"] = "Provider"; //Llenar el último dato necesario
        $this->request["payment_method"] = ""; //Vaciar elemento de la lista
        $this->expectException(\Illuminate\Validation\ValidationException::class);
        $this->controller->validateFormPurchaseOrder($this->request);
        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testFailValidatePurchaseOrderWithoutPaymentMethod "."\033[32m OK \033[0m ". "\n");

    }

    public function testFailValidatePurchaseOrderWithoutCurrency(){

        $this->request["name_provider"] = "Provider"; //Llenar el último dato necesario
        $this->request["currency"] = ""; //Vaciar elemento de la lista
        $this->expectException(\Illuminate\Validation\ValidationException::class);
        $this->controller->validateFormPurchaseOrder($this->request);
        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testFailValidatePurchaseOrderWithoutCurrency "."\033[32m OK \033[0m ". "\n");

    }

    public function testFailValidatePurchaseOrder(){

        $this->request["name_provider"] = ""; //Vaciar elemento de la lista
        $this->request["payment_method"] = ""; //Vaciar elemento de la lista
        $this->request["payment_condition"] = ""; //Vaciar elemento de la lista
        $this->request["currency"] = ""; //Vaciar elemento de la lista
        $this->expectException(\Illuminate\Validation\ValidationException::class);
        $this->controller->validateFormPurchaseOrder($this->request);
        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testFailValidatePurchaseOrder "."\033[32m OK \033[0m ". "\n");

    }
    
    public function testPassValidatePurchaseOrder(){

        $this->request["name_provider"] = "Provider"; //Llenar el último dato necesario
        $this->controller->validateFormPurchaseOrder($this->request);

        $this->addToAssertionCount(1);
        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testPassValidatePurchaseOrder "."\033[32m OK \033[0m ". "\n");
    }

    public function testConsultPurchaseOrderWithoutAreaAssigned(){

        Session::start();

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', 'consultarOrdenes');

        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No puede consultar ordenes de compra.
            Aún no tiene Área asignada. Por favor contacte al administrador de sistemas.");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testConsultPurchaseOrderWithoutAreaAssigned "."\033[32m OK \033[0m ". "\n");

    }

    public function testConsultPurchaseOrderWithoutRolAssigned(){


        Session::start();

        $user = new User(array('username' => 'Test', 'id_user' => 200, 'id_area' => 1));
        $this->be($user);

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', 'consultarOrdenes');
        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No tienes permiso para ver esa área");
//        $this->see("hola");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testConsultPurchaseOrderWithoutRolAssigned "."\033[32m OK \033[0m ". "\n");


    }

    public function seeInPage(){

        $this->see("Consultar Órdenes de Compra");
        $this->see("Listado de Órdenes");
        $this->see("Agregar Orden de Compra");

        $this->see("Area");
        $this->see("Usuario");
        $this->see("Órdenes Emitidas");
        $this->see("Órdenes Aprobadas / Rechazadas");
        $this->see("Editar");
        $this->see("Eliminar");

    }

    public function testConsultPurchaseOrderWithRolAndAreaAssigned(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->call('GET', 'consultarOrdenes');
        $this->seeRouteIs("consultarOrdenes");
        $this->seeInPage();


        $user->detachRoles();
        $user->attachRole(config('constants.gerencia'));

        $this->call('GET', 'consultarOrdenes');
        $this->seeRouteIs("consultarOrdenes");
        $this->seeInPage();

        $user->detachRoles();
        $user->attachRole(config('constants.general'));

        $this->call('GET', 'consultarOrdenes');
        $this->seeRouteIs("consultarOrdenes");
        $this->seeInPage();
        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testConsultPurchaseOrderWithRolAndAreaAssigned "."\033[32m OK \033[0m ". "\n");
        
    }

    public function savePurchaseOrderForSearch(){

        $contract = new Contract(TestData::contractFields);
        $contract['id_contract'] = $this->purchaseOrderFields['id_contract'];
        $contract->save();

        $order = new PurchaseOrder($this->purchaseOrderFields);
        $order->save();

    }

    public function deletePurchaseOrderForSearch($detail = false){
        if($detail){
            $deletePurchaseOrderDetail = PurchaseOrderDetail::findBy('id_purchase_order', $this->purchaseOrderFields['folio_number']);
            $deletePurchaseOrderDetail->delete();
        }
        $deletePurchaseOrder = PurchaseOrder::findBy('folio_number', $this->purchaseOrderFields['folio_number']);
        $deletePurchaseOrder->delete();
        $contract = Contract::findBy('id_contract', $this->purchaseOrderFields['id_contract']);
        $contract->delete();
    }

    public function testListPurchaseOrderBySearch(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $random = rand(1,9999);
        $this->purchaseOrderFields['folio_number'] = $this->purchaseOrderFields['folio_number'] . '_' . sprintf('%04d',$random);
        $this->savePurchaseOrderForSearch();


        $states = ['Aprobada', 'Rechazada', 'Emitida'];
        $this->visit("/consultarOrdenes");

        $this->request["search"] = ["value" => $this->purchaseOrderFields['folio_number'] ];
        $json = $this->controller->findPurchaseOrders($this->request, $states);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();

        $this->seeInPage();
        $this->seeRouteIs("consultarOrdenes"); //No hay redirección
        $this->assertNotNull($json);

        $data = json_decode($json, true); //Decodificar el json

        $this->assertArrayHasKey('data', $data);
        $this->assertArrayHasKey('recordsTotal', $data);
        $this->assertArrayHasKey('iTotalDisplayRecords', $data);
        $this->assertArrayHasKey('recordsFiltered', $data);
        $this->assertArrayHasKey('draw', $data);

        $this->assertContains($this->purchaseOrderFields['folio_number'],$json);
        $this->assertContains($this->purchaseOrderFields['order_state'],$json);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testListPurchaseOrderBySearch "."\033[32m OK \033[0m ". "\n");


    }

    public function testNotFoundPurchaseOrderBySearch(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $random = rand(1,9999);
        $this->purchaseOrderFields['folio_number'] = $this->purchaseOrderFields['folio_number'] . '_' . sprintf('%04d',$random);
        $this->savePurchaseOrderForSearch();


        $states = ['Aprobada', 'Rechazada']; //Buscar por estados donde no está la Orden de Compra
        $this->visit("/consultarOrdenes");

        $this->request["search"] = ["value" => $this->purchaseOrderFields['folio_number'] ];
        $json = $this->controller->findPurchaseOrders($this->request, $states);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();

        $this->seeInPage();
        $this->seeRouteIs("consultarOrdenes"); //No hay redirección
        $this->assertNotNull($json);

        $data = json_decode($json, true); //Decodificar el json

        $this->assertArrayHasKey('data', $data);
        $this->assertArrayHasKey('recordsTotal', $data);
        $this->assertArrayHasKey('iTotalDisplayRecords', $data);
        $this->assertArrayHasKey('recordsFiltered', $data);
        $this->assertArrayHasKey('draw', $data);

        $this->assertNotContains($this->purchaseOrderFields['folio_number'],$json);
        $this->assertNotContains($this->purchaseOrderFields['order_state'],$json);
        $this->assertEmpty($data["data"]);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testNotFoundPurchaseOrderBySearch "."\033[32m OK \033[0m ". "\n");

    }

    public function testNotFoundPurchaseOrderOtherAreaBySearch(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.gerencia'));

        $random = rand(1,9999);
        $this->purchaseOrderFields['id_area'] = 2; //Cambiar el área de la OC
        $this->purchaseOrderFields['folio_number'] = $this->purchaseOrderFields['folio_number'] . '_' . sprintf('%04d',$random);
        $this->savePurchaseOrderForSearch();


        $states = ['Emitida','Aprobada', 'Rechazada']; //Buscar por estados donde no está la Orden de Compra
        $this->visit("/consultarOrdenes");

        $this->request["search"] = ["value" => $this->purchaseOrderFields['folio_number'] ];
        $jsonManager = $this->controller->findPurchaseOrders($this->request, $states);

        $user->detachRoles();
        $user->attachRole(config('constants.general'));

        $jsonGeneral = $this->controller->findPurchaseOrders($this->request, $states);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();

        $this->seeInPage();
        $this->seeRouteIs("consultarOrdenes"); //No hay redirección
        $this->assertNotNull($jsonManager);
        $this->assertNotNull($jsonGeneral);

        $dataManager = json_decode($jsonManager, true); //Decodificar el json

        $this->assertArrayHasKey('data', $dataManager);
        $this->assertArrayHasKey('recordsTotal', $dataManager);
        $this->assertArrayHasKey('iTotalDisplayRecords', $dataManager);
        $this->assertArrayHasKey('recordsFiltered', $dataManager);
        $this->assertArrayHasKey('draw', $dataManager);

        $this->assertNotContains($this->purchaseOrderFields['folio_number'],$jsonManager);
        $this->assertNotContains($this->purchaseOrderFields['order_state'],$jsonManager);
        $this->assertEmpty($dataManager["data"]);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testNotFoundPurchaseOrderOtherAreaBySearch "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetAllProviders(){

        //Setear usuario
        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => TestData::areaClosedFields['id_area']));
        $this->be($user);

        //Crear proveedor
        $provider = new Provider($this->providerFields);
        $provider->save();
        /** @var Provider $provider */
        $provider = Provider::findBy('name_provider', $this->providerFields['name_provider']);

        //Crear contrato
        $contractFields = TestData::ContractProvider($provider->id_provider);
        $contract = new Contract($contractFields);
        $contract->save();
        /** @var Contract $contract */
        $contract = Contract::findBy('id_provider', $provider->id_provider);

        //Crear un área
        $area = new Area(TestData::areaClosedFields);
        $area->save();

        //Crear un presupuesto de área (que indique que el área fue cerrada)
        $areasBudget = new AreasBudget(TestData::areaBudgetFields);
        $areasBudget->save();

        $accountbudget = new AccountBudget(TestData::accountBudgetFields_1);
        $accountbudget->save();

        //Asignar la cuenta al contrato
        $accountContract = new AccountContract(TestData::getAccountContract($area->id_area, $accountbudget->account_code,
                                                $contract->id_contract));
        $accountContract->save();

        $providers = $this->controller->getProviders();


        //Eliminar los datos antes de los asserts para asegurar que siempre se borran
        $accountContract = AccountContract::findBy('id_contract', $contract->id_contract);
        $accountContract->delete();
        $contract->delete();
        $provider->delete();
        $area = Area::find(TestData::areaClosedFields['id_area']);

        AreasBudget::deleteBudgets($area->id_area);
        AccountBudget::deleteBudgets($area->id_area);
        $area->delete();

        //Buscar el proveedor-contrato recién creado en los resultados
        $this->assertNotEmpty($providers->getData());
        $nameProvider = $provider->name_provider . ' - ' . $contract->contract_number . ' (' . $contract->description . ')';
        $this->assertContains($nameProvider, $providers->getData());

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetAllProviders "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetProvidersHavingContractWithoutAccounts(){

        //Setear usuario
        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => TestData::areaClosedFields['id_area']));
        $this->be($user);

        //Crear proveedor
        $provider = new Provider($this->providerFields);
        $provider->save();
        /** @var Provider $provider */
        $provider = Provider::findBy('name_provider', $this->providerFields['name_provider']);

        //Crear contrato
        $contractFields = TestData::ContractProvider($provider->id_provider);
        $contract = new Contract($contractFields);
        $contract->save();
        /** @var Contract $contract */
        $contract = Contract::findBy('id_provider', $provider->id_provider);

        //Crear un área
        $area = new Area(TestData::areaClosedFields);
        $area->save();

        //Crear un presupuesto de área (que indique que el área fue cerrada)
        $areasBudget = new AreasBudget(TestData::areaBudgetFields);
        $areasBudget->save();

        $accountbudget = new AccountBudget(TestData::accountBudgetFields_1);
        $accountbudget->save();

        $providers = $this->controller->getProviders();

        //Eliminar los datos antes de los asserts para asegurar que siempre se borran
        $contract->delete();
        $provider->delete();
        $area = Area::find(TestData::areaClosedFields['id_area']);

        AreasBudget::deleteBudgets($area->id_area);
        AccountBudget::deleteBudgets($area->id_area);
        $area->delete();

        //Buscar el proveedor-contrato recién creado en los resultados
        $this->assertEmpty($providers->getData());
        $nameProvider = $provider->name_provider . ' - ' . $contract->contract_number . ' (' . $contract->description . ')';
        $this->assertNotContains($nameProvider, $providers->getData());

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetProvidersHavingContractWithoutAccounts "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetProvidersHavingAreaOpen(){

        //Setear usuario
        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => TestData::areaClosedFields['id_area']));
        $this->be($user);

        //Crear proveedor
        $provider = new Provider($this->providerFields);
        $provider->save();
        /** @var Provider $provider */
        $provider = Provider::findBy('name_provider', $this->providerFields['name_provider']);

        //Crear contrato
        $contractFields = TestData::ContractProvider($provider->id_provider);
        $contract = new Contract($contractFields);
        $contract->save();
        /** @var Contract $contract */
        $contract = Contract::findBy('id_provider', $provider->id_provider);

        //Crear un área
        $area = new Area(TestData::areaClosedFields);
        $area->save();

        $accountbudget = new AccountBudget(TestData::accountBudgetFields_1);
        $accountbudget->save();

        //Asignar la cuenta al contrato
        $accountContract = new AccountContract(TestData::getAccountContract($area->id_area, $accountbudget->account_code,
            $contract->id_contract));
        $accountContract->save();

        $providers = $this->controller->getProviders();

        //Eliminar los datos antes de los asserts para asegurar que siempre se borran
        $accountContract = AccountContract::findBy('id_contract', $contract->id_contract);
        $accountContract->delete();
        $contract->delete();
        $provider->delete();
        $area = Area::find(TestData::areaClosedFields['id_area']);

        AccountBudget::deleteBudgets($area->id_area);
        $area->delete();

        //Buscar el proveedor-contrato recién creado en los resultados
        $this->assertEmpty($providers->getData());
        $nameProvider = $provider->name_provider . ' - ' . $contract->contract_number . ' (' . $contract->description . ')';
        $this->assertNotContains($nameProvider, $providers->getData());

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetProvidersHavingAreaOpen "."\033[32m OK \033[0m ". "\n");

    }
    
    public function testCreateOrderWithoutAreaAssigned(){

        Session::start();

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', 'crearOrdenes');

        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No puede crear ordenes de compra.
            Aún no tiene Área asignada. Por favor contacte al administrador de sistemas.");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testCreateOrderWithoutAreaAssigned "."\033[32m OK \033[0m ". "\n");

    }

    public function testCreateOrderWithoutRolAssigned(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);
        $user->detachRoles();

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', 'crearOrdenes');
        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No tienes permiso para ver esa área");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testCreateOrderWithoutRolAssigned "."\033[32m OK \033[0m ". "\n");

    }

    public function seeInPageCreateOrder(){

        $this->see("DATOS DEL PROVEEDOR");
        $this->seeElement('input', ['name' => 'name_provider']);
        $this->see("CONDICIÓN DE PAGO");
        $this->seeElement('select', ['name' => 'payment_condition']);
        $this->see("MÉTODO DE PAGO");
        $this->seeElement('select', ['name' => 'payment_method']);
        $this->see("PRODUCTO A COMPRAR");
        $this->seeElement('select', ['name' => 'currency']);
        $this->see("Generar Orden de Compra");
    }

    public function testCreateOrderWithRolAndAreaAssigned(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->call('GET', 'crearOrdenes');
        $this->seeRouteIs("crearOrden");
        $this->seeInPageCreateOrder();

        $user->detachRoles();
        $user->attachRole(config('constants.gerencia'));

        $this->call('GET', 'crearOrdenes');
        $this->seeRouteIs("crearOrden");
        $this->seeInPageCreateOrder();

        $user->detachRoles();
        $user->attachRole(config('constants.general'));

        $this->call('GET', 'crearOrdenes');
        $this->seeRouteIs("crearOrden");
        $this->seeInPageCreateOrder();

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testCreateOrderWithRolAndAreaAssigned "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetExistingProviderByName(){

        $provider = new Provider($this->providerFields);
        $provider->save();
        /** @var Provider $provider */
        $provider = Provider::findBy('name_provider', $this->providerFields['name_provider']);

        $response = $this->controller->getProviderByName($provider->name_provider);

        //Eliminar los datos antes de los asserts para asegurar que siempre se borran
        $provider->delete();

        $this->assertNotNull($response);
        $this->assertContains($this->providerFields['name_provider'], $response->getContent());
        $this->assertContains($this->providerFields['address'], $response->getContent());
        $this->assertContains($this->providerFields['contact_name'], $response->getContent());
        $this->assertContains($this->providerFields['rut'], $response->getContent());
        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetExistingProviderByName "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetNotExistingProviderByName(){

        $randomName = "prov".rand(0,99999);
        $response = $this->controller->getProviderByName($randomName);

        $len = count($response->getData(true));
        $this->assertEquals(0, $len);
        $this->assertEmpty($response->getData(true));

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetNotExistingProviderByName "."\033[32m OK \033[0m ". "\n");
    }

    public function testGetMonths(){

        $response = $this->controller->getMonths();

        $months = $response->getData(true);

        $this->assertContains('ENE', $months);
        $this->assertContains('FEB', $months);
        $this->assertContains('MAR', $months);
        $this->assertContains('ABR', $months);
        $this->assertContains('MAY', $months);
        $this->assertContains('JUN', $months);
        $this->assertContains('JUL', $months);
        $this->assertContains('AGO', $months);
        $this->assertContains('SEP', $months);
        $this->assertContains('OCT', $months);
        $this->assertContains('NOV', $months);
        $this->assertContains('DIC', $months);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetMonths "."\033[32m OK \033[0m ". "\n");
    }

    public function testCleanTotal(){

        $amount = "US$ 5.665.656.343,12"; //Dolar
        $amount = $this->controller->cleanTotal($amount);

        $this->assertNotContains(',', $amount);
        $this->assertNotContains('$', $amount);
        $this->assertNotContains('US', $amount);

        $amount = "$ 464.565.768.671"; //CLP
        $amount = $this->controller->cleanTotal($amount);

        $this->assertNotContains(',', $amount);
        $this->assertNotContains('$', $amount);

        $amount = "3.532.133.322,23€"; //Euros
        $amount = $this->controller->cleanTotal($amount);

        $this->assertNotContains('€', $amount);
        $this->assertNotContains(',', $amount);

        $amount = "UF 242.342.345,45"; //UF
        $amount = $this->controller->cleanTotal($amount);

        $this->assertNotContains(',', $amount);
        $this->assertNotContains('UF', $amount);

        $amount = "NKr 32.423.423,27"; //Nkr
        $amount = $this->controller->cleanTotal($amount);

        $this->assertNotContains(',', $amount);
        $this->assertNotContains('NKr', $amount);

        $amount = "SKr 78.989.563,46"; //Skr
        $amount = $this->controller->cleanTotal($amount);

        $this->assertNotContains('SKr', $amount);
        $this->assertNotContains(',', $amount);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testCleanTotal "."\033[32m OK \033[0m ". "\n");

    }

    public function testCreateDetail(){

        $detail = Mockery::mock(PurchaseOrderDetail::class);
        $detail->shouldReceive('getAttribute')->with('quantity')->andReturn(4);
        $detail->shouldReceive('getAttribute')->with('description')->andReturn('Computador Notebook');
        $detail->shouldReceive('getAttribute')->with('price')->andReturn('300000');
        $detail->shouldReceive('getAttribute')->with('has_iva')->andReturn(1);
        $detail->shouldReceive('getAttribute')->with('price_iva')->andReturn('357000');

        $order = Mockery::mock(PurchaseOrder::class);
        $order->shouldReceive('getAttribute')->with('id_currency')->andReturn(2);

        $name = "XXX_YYY_ZZZZ_2017808080";

        /** @var \App\Models\PurchaseOrderDetail $order */
        $orderDetail = $this->controller->createDetail($detail, $order, $name);

        //Campos obligatorios
        verify($orderDetail->id_purchase_order)->notNull();

        //Valores
        verify($orderDetail->id_purchase_order)->equals($name);
        verify($orderDetail->quantity)->equals(4);
        verify($orderDetail->description)->equals('Computador Notebook');
        verify($orderDetail->price)->equals('75000');
        verify($orderDetail->has_iva)->equals(1);
        verify($orderDetail->price_iva)->equals('89250');
        verify($orderDetail->id_currency)->equals(2);

        $this->assertInstanceOf(PurchaseOrderDetail::class,$orderDetail);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testCreateDetail "."\033[32m OK \033[0m ". "\n");
    }
    
    public function testCreateDetailForResumeWithIva(){

        //Llenar el resto de los campos necesarios
        $this->request["priceWithoutIva_1"] = TestData::orderDetail_1['price'];
        $this->request["cant_1"]            = TestData::orderDetail_1['quantity'];
        $this->request["desc_1"]            = TestData::orderDetail_1['description'];
        $this->request["iva_1"]             = TestData::orderDetail_1['has_iva'];
        $this->request["priceWithIva_1"]    = TestData::orderDetail_1['price_iva'];

        $count = 1;
        //Rango de meses implica cantidad igual a 1
        $iniMonth= 1;
        $endMonth= 5;

        $detail = $this->controller->createDetailForResume($this->request,$count,$iniMonth,$endMonth);

        $this->assertInstanceOf(PurchaseOrderDetail::class,$detail);
        $this->assertNotEquals($this->request["cant_1"], $detail->quantity);
        $this->assertEquals(1, $detail->quantity);
        $this->assertEquals($this->request["priceWithoutIva_1"], $detail->price);
        $this->assertEquals($this->request["priceWithIva_1"], $detail->price_iva);
        $this->assertEquals(1, $detail->has_iva);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testCreateDetailForResumeWithIva "."\033[32m OK \033[0m ". "\n");

    }

    public function testCreateDetailForResumeWithoutIva(){

        //Llenar el resto de los campos necesarios
        $this->request["priceWithoutIva_1"] = TestData::orderDetail_1['price'];
        $this->request["cant_1"]            = TestData::orderDetail_1['quantity'];
        $this->request["desc_1"]            = TestData::orderDetail_1['description'];
        $this->request["iva_1"]             = 'off';
        $this->request["priceWithIva_1"]    = TestData::orderDetail_1['price_iva'];

        $count = 1;
        //Rango de meses implica cantidad igual a 1
        $iniMonth= 1;
        $endMonth= 5;

        $detail = $this->controller->createDetailForResume($this->request,$count,$iniMonth,$endMonth);

        $this->assertInstanceOf(PurchaseOrderDetail::class,$detail);
        $this->assertNotEquals($this->request["cant_1"], $detail->quantity);
        $this->assertEquals(1, $detail->quantity);
        $this->assertEquals($this->request["priceWithoutIva_1"], $detail->price);
        $this->assertEquals(0, $detail->has_iva);
        $this->assertEquals(0, $detail->price_iva);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testCreateDetailForResumeWithoutIva "."\033[32m OK \033[0m ". "\n");

    }

    public function testCreateDetailForResumeWithQuantityEnabled(){

        //Llenar el resto de los campos necesarios
        $this->request["priceWithoutIva_1"] = TestData::orderDetail_1['price'];
        $this->request["cant_1"]            = TestData::orderDetail_1['quantity'];
        $this->request["desc_1"]            = TestData::orderDetail_1['description'];
        $this->request["iva_1"]             = TestData::orderDetail_1['has_iva'];
        $this->request["priceWithIva_1"]    = TestData::orderDetail_1['price_iva'];

        $count = 1;
        //Rango de meses inexistente implica cantidad habilitada
        $iniMonth= 4;
        $endMonth= 4;

        $detail = $this->controller->createDetailForResume($this->request,$count,$iniMonth,$endMonth);

        $this->assertInstanceOf(PurchaseOrderDetail::class,$detail);
        $this->assertEquals($this->request["cant_1"], $detail->quantity);

        $this->assertGreaterThan($this->request["priceWithoutIva_1"], $detail->price);
        $this->assertEquals($this->request["priceWithoutIva_1"] * $this->request["cant_1"], $detail->price);

        $this->assertGreaterThan($this->request["priceWithIva_1"], $detail->price_iva);
        $this->assertEquals($this->request["priceWithIva_1"] * $this->request["cant_1"], $detail->price_iva);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testCreateDetailForResumeWithQuantityEnabled "."\033[32m OK \033[0m ". "\n");

    }

    public function getOneFullRangeDetail(){

        //Llenar el resto de los campos necesarios
        $this->request["priceWithoutIva_1"] = TestData::orderDetail_1['price'];
        $this->request["cant_1"]            = 1;
        $this->request["desc_1"]            = TestData::orderDetail_1['description'];
        $this->request["iva_1"]             = TestData::orderDetail_1['has_iva'];
        $this->request["priceWithIva_1"]    = TestData::orderDetail_1['price_iva'];

        $this->request['month_ini_1'] = TestData::rangeAnual['month_ini'];
        $this->request['month_1']     = TestData::rangeAnual['month'];
        $this->request['month_end_1'] = TestData::rangeAnual['month_end'];

    }

    public function getOneRangeDetail(){

        //Llenar el resto de los campos necesarios
        $this->request["priceWithoutIva_1"] = TestData::orderDetail_1['price'];
        $this->request["cant_1"]            = 1;
        $this->request["desc_1"]            = TestData::orderDetail_1['description'];
        $this->request["iva_1"]             = TestData::orderDetail_1['has_iva'];
        $this->request["priceWithIva_1"]    = TestData::orderDetail_1['price_iva'];

        $range = TestData::rangeMonths(4,'on',6);
        $this->request['month_ini_1'] = $range['month_ini'];
        $this->request['month_1']     = $range['month'];
        $this->request['month_end_1'] = $range['month_end'];

    }

    public function getNoRangeDetail(){

        //Llenar el resto de los campos necesarios
        $this->request["priceWithoutIva_1"] = TestData::orderDetail_1['price'];
        $this->request["cant_1"]            = TestData::orderDetail_1['quantity'];
        $this->request["desc_1"]            = TestData::orderDetail_1['description'];
        $this->request["iva_1"]             = TestData::orderDetail_1['has_iva'];
        $this->request["priceWithIva_1"]    = TestData::orderDetail_1['price_iva'];

        $range = TestData::rangeMonths(8,'off',8);
        $this->request['month_ini_1'] = $range['month_ini'];
        $this->request['month_1']     = $range['month'];
        $this->request['month_end_1'] = $range['month_end'];


    }

    public function getManyDetails($index){

        $this->resetRequest();

        switch ($index){

            case 1: //Todos los meses con detalle y un mes con más de un detalle

                $this->request["priceWithoutIva_1"] = TestData::orderDetail_1['price'];
                $this->request["cant_1"]            = TestData::orderDetail_1['quantity'];
                $this->request["desc_1"]            = TestData::orderDetail_1['description'];
                $this->request["iva_1"]             = TestData::orderDetail_1['has_iva'];
                $this->request["priceWithIva_1"]    = TestData::orderDetail_1['price_iva'];

                $this->request['month_ini_1'] = TestData::rangeAnual['month_ini'];
                $this->request['month_1']     = TestData::rangeAnual['month'];
                $this->request['month_end_1'] = TestData::rangeAnual['month_end'];


                $this->request["priceWithoutIva_2"] = TestData::orderDetail_2['price'];
                $this->request["cant_2"]            = TestData::orderDetail_2['quantity'];
                $this->request["desc_2"]            = TestData::orderDetail_2['description'];
                $this->request["iva_2"]             = TestData::orderDetail_2['has_iva'];
                $this->request["priceWithIva_2"]    = TestData::orderDetail_2['price_iva'];

                $range = TestData::rangeMonths(3,'off',3);
                $this->request['month_ini_2'] = $range['month_ini'];
                $this->request['month_2']     = $range['month'];
                $this->request['month_end_2'] = $range['month_end'];

                break;
            case 2:

                $this->request["priceWithoutIva_1"] = TestData::orderDetail_2['price'];
                $this->request["cant_1"]            = TestData::orderDetail_2['quantity'];
                $this->request["desc_1"]            = TestData::orderDetail_2['description'];
                $this->request["iva_1"]             = TestData::orderDetail_2['has_iva'];
                $this->request["priceWithIva_1"]    = TestData::orderDetail_2['price_iva'];

                $range = TestData::rangeMonths(4,'off',4);
                $this->request['month_ini_1'] = $range['month_ini'];
                $this->request['month_1']     = $range['month'];
                $this->request['month_end_1'] = $range['month_end'];


                $this->request["priceWithoutIva_2"] = TestData::orderDetail_1['price'];
                $this->request["cant_2"]            = 30;
                $this->request["desc_2"]            = 'Audifonos';
                $this->request["iva_2"]             = TestData::orderDetail_1['has_iva'];
                $this->request["priceWithIva_2"]    = TestData::orderDetail_1['price_iva'];

                $range = TestData::rangeMonths(6,'off',6);
                $this->request['month_ini_2'] = $range['month_ini'];
                $this->request['month_2']     = $range['month'];
                $this->request['month_end_2'] = $range['month_end'];

                break;
            case 3:

                $this->request["priceWithoutIva_1"] = TestData::orderDetail_2['price'];
                $this->request["cant_1"]            = 5;
                $this->request["desc_1"]            = TestData::orderDetail_2['description'];
                $this->request["iva_1"]             = TestData::orderDetail_2['has_iva'];
                $this->request["priceWithIva_1"]    = TestData::orderDetail_2['price_iva'];

                $range = TestData::rangeMonths(8,'off',8);
                $this->request['month_ini_1'] = $range['month_ini'];
                $this->request['month_1']     = $range['month'];
                $this->request['month_end_1'] = $range['month_end'];


                $this->request["priceWithoutIva_2"] = TestData::orderDetail_1['price'];
                $this->request["cant_2"]            = 2;
                $this->request["desc_2"]            = 'Mousepad';
                $this->request["iva_2"]             = TestData::orderDetail_1['has_iva'];
                $this->request["priceWithIva_2"]    = TestData::orderDetail_1['price_iva'];

                $this->request['month_ini_2'] = $range['month_ini'];
                $this->request['month_2']     = $range['month'];
                $this->request['month_end_2'] = $range['month_end'];


                $this->request["priceWithoutIva_3"] = TestData::orderDetail_3['price'];
                $this->request["cant_3"]            = TestData::orderDetail_3['quantity'];
                $this->request["desc_3"]            = TestData::orderDetail_3['description'];
                $this->request["iva_3"]             = TestData::orderDetail_3['has_iva'];
                $this->request["priceWithIva_3"]    = TestData::orderDetail_3['price_iva'];

                $this->request['month_ini_3'] = $range['month_ini'];
                $this->request['month_3']     = $range['month'];
                $this->request['month_end_3'] = $range['month_end'];
                break;

            case 4:

                $this->request["priceWithoutIva_1"] = TestData::orderDetail_2['price'];
                $this->request["cant_1"]            = TestData::orderDetail_2['quantity'];
                $this->request["desc_1"]            = TestData::orderDetail_2['description'];
                $this->request["iva_1"]             = TestData::orderDetail_2['has_iva'];
                $this->request["priceWithIva_1"]    = TestData::orderDetail_2['price_iva'];

                $range = TestData::rangeMonths(7,'off',7);
                $this->request['month_ini_1'] = $range['month_ini'];
                $this->request['month_1']     = $range['month'];
                $this->request['month_end_1'] = $range['month_end'];


                $this->request["priceWithoutIva_2"] = TestData::orderDetail_1['price'];
                $this->request["cant_2"]            = TestData::orderDetail_1['quantity'];
                $this->request["desc_2"]            = TestData::orderDetail_1['description'];
                $this->request["iva_2"]             = TestData::orderDetail_1['has_iva'];
                $this->request["priceWithIva_2"]    = TestData::orderDetail_1['price_iva'];

                $range = TestData::rangeMonths(3,'on',9);
                $this->request['month_ini_2'] = $range['month_ini'];
                $this->request['month_2']     = $range['month'];
                $this->request['month_end_2'] = $range['month_end'];

                break;

            default:
                break;


        }



    }

    /**
     * @method valida que el monto devuelto en el json sea el correcto
     * @param $pos = Se refiere a la posicion del elemento en el Request
     * @param $array  = La data del json en forma de arreglo
     * @param $ind_month  = Asociado al índice dentro del json, los índices corresponden a los meses del año (1 -12)
     * @param $orden_form = Se refiere al orden en el que se almacena el detalle en el json (dependiendo del orden en el request)
     * @param $is_iva = Para determinar si se desea el valor del precio con iva o precio sin iva
     * @param $is_greater_strict = Para determinar si se desea validar si el monto es mayor que, o mayor o igual que
     * @param $is_quan_valid = Para saber si se valida en función de la cantidad del Request o en función a 1 (por tener rangos de meses)
     */
    public function assertPriceOnJson($pos, $array, $ind_month, $orden_form, $is_iva, $is_greater_strict, $is_quan_valid){

        $cant = $is_quan_valid == 1 ? $this->request["cant_".$pos] : 1;

        if($is_iva == 1){
            if($is_greater_strict == 1){
                $this->assertGreaterThan($this->request["priceWithIva_".$pos], $array[$ind_month][$orden_form]['price_iva']);
            }else{
                $this->assertGreaterThanOrEqual($this->request["priceWithIva_".$pos], $array[$ind_month][$orden_form]['price_iva']);
            }
            $this->assertEquals($this->request["priceWithIva_".$pos] * $cant, $array[$ind_month][$orden_form]['price_iva']);
        }else{
            if($is_greater_strict == 1){
                $this->assertGreaterThan($this->request["priceWithoutIva_".$pos], $array[$ind_month][$orden_form]['price']);
            }else{
                $this->assertGreaterThanOrEqual($this->request["priceWithoutIva_".$pos], $array[$ind_month][$orden_form]['price']);
            }
            $this->assertEquals($this->request["priceWithoutIva_".$pos] * $cant, $array[$ind_month][$orden_form]['price']);
        }

    }

    public function testValidatePurchaseOrders_MonthRangeWithOneDetail(){

        $this->getOneFullRangeDetail(); //Obtener detalle para todos los meses del año

        $this->request['count_detail'] = 1;

        $details = $this->controller->validatePurchaseOrders($this->request);

        $this->assertNotEmpty($details);

        $array = $details->getData(true);

        for($i= 1; $i<=12; $i++){
            $this->assertArrayHasKey(strval($i), $array);
            $this->assertNotEmpty($array[$i]);
            $this->assertEquals(1,$array[$i][0]['quantity']);

            if($i != 1){
                $this->assertEquals($array[$i], $array[$i-1]);
            }
        }

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testValidatePurchaseOrders_MonthRangeWithOneDetail "."\033[32m OK \033[0m ". "\n");

    }

    public function testValidatePurchaseOrders_MinorRangeWithOneDetail(){

        $this->getOneRangeDetail(); //Obtener detalle para algunos meses del año

        $this->request['count_detail'] = 1;

        $details = $this->controller->validatePurchaseOrders($this->request);

        $this->assertNotEmpty($details);

        $array = $details->getData(true);

        for($i= 1; $i<=12; $i++){
            $this->assertArrayHasKey(strval($i), $array);

            if(in_array($i,range($this->request['month_ini_1'],$this->request['month_end_1']))){
                $this->assertNotEmpty($array[$i]);
                $this->assertEquals(1,$array[$i][0]['quantity']);

                if($i > $this->request['month_ini_1']){ $this->assertEquals($array[$i], $array[$i-1]);   }
            }else{
                $this->assertEmpty($array[$i]);
            }
        }

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testValidatePurchaseOrders_MinorRangeWithOneDetail "."\033[32m OK \033[0m ". "\n");
    }

    public function testValidatePurchaseOrders_NoRangeWithOneDetail(){

        $this->getNoRangeDetail(); //Obtener detalle para un mes del año

        $this->request['count_detail'] = 1;

        $details = $this->controller->validatePurchaseOrders($this->request);

        $this->assertNotEmpty($details);

        $array = $details->getData(true);

        for($i= 1; $i<=12; $i++){
            $this->assertArrayHasKey(strval($i), $array);

            if(in_array($i,range($this->request['month_ini_1'],$this->request['month_ini_1']))){
                $this->assertNotEmpty($array[$i]);
                $this->assertEquals($this->request['cant_1'],$array[$i][0]['quantity']);

                $this->assertGreaterThan($this->request["priceWithoutIva_1"], $array[$i][0]['price']);
                $this->assertEquals($this->request["priceWithoutIva_1"] * $this->request["cant_1"], $array[$i][0]['price']);

                $this->assertGreaterThan($this->request["priceWithIva_1"], $array[$i][0]['price_iva']);
                $this->assertEquals($this->request["priceWithIva_1"] * $this->request["cant_1"], $array[$i][0]['price_iva']);

            }else{
                $this->assertEmpty($array[$i]);
            }
        }

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testValidatePurchaseOrders_NoRangeWithOneDetail "."\033[32m OK \033[0m ". "\n");
    }

    public function testValidatePurchaseOrders_ManyDetails(){


        /**
         * Se realizan cuatro (4) pruebas distintas, a saber:
         * var TEST = 1 todos los meses con detalle excepto un mes con dos detalles
         * var TEST = 2 solo dos meses del año con un detalle
         * var TEST = 3 solo un mes del año con tres detalles
         * var TEST = 4 algunos meses del año con detalle excepto un mes con dos detalles
         */

        for($test=1; $test<=4 ; $test++) {
            //Obtener detalles cruzados entre meses del año
            $this->getManyDetails($test);

            $this->request['count_detail'] = 3; //Hasta 10 detalles máximo

            //Método a probar
            $details = $this->controller->validatePurchaseOrders($this->request);

            $this->assertNotEmpty($details);

            $array = $details->getData(true);

            $counts = array();

            for($i= 1; $i<=12; $i++) {

                $this->assertArrayHasKey(strval($i), $array);
                $counts[$i] =  count($array[$i]); //Cantidad de elementos en cada mes

                if ($test == 1) {  $this->assertNotEmpty($array[$i]);   }
            }

            /** VALIDAR CANTIDAD DE DETALLES DEVUELTOS */

            $total = array_count_values($counts);
            $indice_varios_detalles = 0;
            $indTest2 = array();

            if($test==1 || $test==4){ //Caso de dos detalles en un mismo mes

                $indice_varios_detalles = array_search('2',$counts);

                //Debe existir sólo un mes con dos detalles
                $this->assertEquals( 1 ,$total['2']);
                fwrite(STDOUT,   'CASO '. $test.'= Total de meses con dos detalles: ' . $total['2'] . "\033[32m OK \033[0m " . "\n");
            }

            if($test==3){ //Caso de tres detalles en un mismo mes
                $indice_varios_detalles = array_search('3',$counts);

                //Debe existir sólo un mes con tres detalles
                $this->assertEquals( 1 ,$total['3']);
                fwrite(STDOUT,  'CASO '. $test.'= Total de meses con tres detalles: ' . $total['3']. "\033[32m OK \033[0m " . "\n");
            }

            if($test==2){ //Caso de un detalle en dos meses distintos
                $indTest2 = array_keys($counts,'1');

                //Deben existir dos meses con un detalle
                $this->assertEquals( 2 ,$total['1']);
                fwrite(STDOUT,  'CASO '. $test.'= Total de meses con un detalle: ' . $total['1']. "\033[32m OK \033[0m " . "\n");
            }

            $total_cero = isset($total['0']) ? $total['0'] : 0;

            //Sólo en el primer caso no debe existir ningún mes sin detalle
            $test==1 ?   $this->assertEquals(0,$total_cero) : $this->assertGreaterThan(0,$total_cero);


            /** VALIDAR DETALLES */

            if($test == 1 || $test == 4){ //Casos inversos para el mes con doble detalle

                $indice = ($test==1) ? 0 : 1;
                $pos = ($test==1) ? 1: 2;

                //Validar detalle en rango
                $this->assertPriceOnJson($pos,$array,$indice_varios_detalles,$indice,0,0,0);
                $this->assertPriceOnJson($pos,$array,$indice_varios_detalles,$indice,1,0,0);

                //Validar detalle para mes especifico
                $indice = ($test==1) ? 1 : 0;
                $pos = ($test==1) ? 2: 1;

                $this->assertPriceOnJson($pos,$array,$indice_varios_detalles,$indice,0,1,1);
                $this->assertPriceOnJson($pos,$array,$indice_varios_detalles,$indice,1,1,1);
            }

            if($test == 3){

                $this->assertPriceOnJson(1,$array,$indice_varios_detalles,0,0,1,1);
                $this->assertPriceOnJson(1,$array,$indice_varios_detalles,0,1,1,1);

                $this->assertPriceOnJson(2,$array,$indice_varios_detalles,1,0,1,1);
                $this->assertPriceOnJson(2,$array,$indice_varios_detalles,1,1,1,1);

                $this->assertPriceOnJson(3,$array,$indice_varios_detalles,2,0,1,1);
                //Este elemento no tiene IVA
                $this->assertArrayNotHasKey('price_iva', $array[$indice_varios_detalles][2]);

            }

            if($test==2){

                $this->assertPriceOnJson(1,$array,$indTest2[0],0,0,1,1);
                $this->assertPriceOnJson(1,$array,$indTest2[0],0,1,1,1);

                $this->assertPriceOnJson(2,$array,$indTest2[1],0,0,1,1);
                $this->assertPriceOnJson(2,$array,$indTest2[1],0,1,1,1);

            }

        }


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testValidatePurchaseOrders_ManyDetails "."\033[32m OK \033[0m ". "\n");
    }
    
    /** LAS PRUEBAS DEL MÉTODO savePurchaseOrder SE REALIZARON EN LAS PRUEBAS FUNCIONALES */
    
    public function testGetOrderDetailDenied_Emission(){

        Session::start();

        $this->savePurchaseOrderForSearch();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'];

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();

        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"Aún no tiene área asignada. Consulte al administrador de sistema.");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailDenied_Emission "."\033[32m OK \033[0m ". "\n");
        
    }

    public function savePurchaseOrderDetailForTest(){
        $this->parametersDetail['id_purchase_order'] = $this->purchaseOrderFields['folio_number'];
        $detail = new PurchaseOrderDetail($this->parametersDetail);
        $detail->save();
    }

    public function testGetOrderDetailGranted_Emission(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.general'));

        //Agregar datos de prueba
        $this->savePurchaseOrderForSearch();
        $this->savePurchaseOrderDetailForTest();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'];

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $deletePurchaseOrderDetail = PurchaseOrderDetail::findBy('id_purchase_order', $this->purchaseOrderFields['folio_number']);
        $deletePurchaseOrderDetail->delete();
        $this->deletePurchaseOrderForSearch();


        $this->assertPageLoaded($uri);
        $this->see('Yapo.cl SpA');
        $this->see('Mariano Sánchez Fontecilla #310, of 1001');
        $this->see($this->purchaseOrderFields['folio_number']);
        $this->see($this->parametersDetail['description']);
        $this->see($this->parametersDetail['quantity']);
        $this->see($this->parametersDetail['price']);
        $this->see('<div class="row align-buttons" id="botonesAprobacion" hidden>');
        $this->see('Atrás');

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailGranted_Emission "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetOrderDetailDeniedForbiddenArea_Emission(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.general'));

        //Agregar datos de prueba
        $this->purchaseOrderFields['id_area'] = 2; //Cambiar el área de orden de compra, siendo el usuario Rol General
        $this->savePurchaseOrderForSearch();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'];

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();


        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No puede consultar órdenes de compra de otras áreas. Acceso denegado!");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailDeniedForbiddenArea_Emission "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetOrderDetailDeniedForbiddenArea2_Emission(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.gerencia'));

        //Agregar datos de prueba
        $this->purchaseOrderFields['id_area'] = 2; //Cambiar el área de orden de compra, siendo el usuario Rol Gerencia
        $this->savePurchaseOrderForSearch();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'];

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();


        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No puede consultar órdenes de compra de otras áreas. Acceso denegado!");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailDeniedForbiddenArea2_Emission "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetOrderDetailDeniedForbiddenArea3_Emission(){

        Session::start();
        //Siendo usuario de un área consultar una OC de alguien más de la misma área
        $user = new User(array('username' => 'Ana', 'id_user' => 200, 'id_area' => 1));
        $user->save();
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.general'));

        //Agregar datos de prueba
        $this->savePurchaseOrderForSearch();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'];

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();
        $user->delete();


        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No puede consultar órdenes de compra de otras personas. Acceso denegado!");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailDeniedForbiddenArea3_Emission "."\033[32m OK \033[0m ". "\n");

    }


    public function testGetOrderDetailGrantedForbiddenArea_Emission(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        //Agregar datos de prueba
        $this->purchaseOrderFields['id_area'] = 2; //Cambiar el área de orden de compra, siendo el usuario Rol Finanzas
        $this->savePurchaseOrderForSearch();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'];

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();


        $this->assertPageLoaded($uri);
        $this->see('Yapo.cl SpA');
        $this->see('Mariano Sánchez Fontecilla #310, of 1001');
        $this->see($this->purchaseOrderFields['folio_number']);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailGrantedForbiddenArea_Emission "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetOrderDetailGrantedForbiddenArea2_Emission(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.gerencia'));

        //Agregar datos de prueba
        $this->purchaseOrderFields['id_area'] = 2; //Cambiar el área de orden de compra, siendo el usuario Rol Gerencia
        $this->savePurchaseOrderForSearch();

        //Alterar el gerente del área para que sea el usuario actual
        $area = Area::findBy('id_area', $this->purchaseOrderFields['id_area']);
        $oldManager = $area->id_user;
        $area->id_user = $user->id_user;
        $area->save();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'];

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();


        $area = Area::findBy('id_area', $this->purchaseOrderFields['id_area']);
        $area->id_user = $oldManager; //Retornar al área su gerente anterior
        $area->save();


        $this->assertPageLoaded($uri);
        $this->see('Yapo.cl SpA');
        $this->see('Mariano Sánchez Fontecilla #310, of 1001');
        $this->see($this->purchaseOrderFields['folio_number']);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailGrantedForbiddenArea2_Emission "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetOrderDetailDeniedMissingRole_Emission(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);
        $user->detachRoles();

        //Agregar datos de prueba
        $this->savePurchaseOrderForSearch();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'];

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();

        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"Aún no tiene rol asignado. Consulte al administrador de sistema.");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailDeniedMissingRole_Emission "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetOrderDetailDenied_Validate(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.general'));

        //Agregar datos de prueba
        $this->purchaseOrderFields['order_state'] = config('constantes.aprobada'); //Cambiar el estado de orden de compra
        $this->savePurchaseOrderForSearch();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'] . '/validate';

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();


        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No puede aprobar órdenes de compra. No tiene el Rol correspondiente. Acceso denegado!");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailDenied_Validate "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetOrderDetailDeniedForbiddenArea_Validate(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.gerencia'));

        //Agregar datos de prueba
        $this->purchaseOrderFields['order_state'] = config('constantes.aprobada'); //Cambiar el estado de orden de compra
        $this->purchaseOrderFields['id_area'] = 2; //Cambiar el área de orden de compra, siendo el usuario Rol Gerencia
        $this->savePurchaseOrderForSearch();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'] . '/validate';

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();


        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No puede aprobar órdenes de compra de otras áreas. Acceso denegado!");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailDeniedForbiddenArea_Validate "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetOrderDetailGranted_Validate(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        //Agregar datos de prueba
        $this->purchaseOrderFields['order_state'] = config('constantes.aprobada'); //Cambiar el estado de orden de compra
        $this->purchaseOrderFields['id_area'] = 2; //Cambiar el área de orden de compra, siendo el usuario Rol Finanzas
        $this->savePurchaseOrderForSearch();
        $this->savePurchaseOrderDetailForTest();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'] . '/validate';

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch(true);


        $this->assertPageLoaded($uri);
        $this->see('Yapo.cl SpA');
        $this->see('Mariano Sánchez Fontecilla #310, of 1001');
        $this->see($this->purchaseOrderFields['folio_number']);
        $this->see($this->parametersDetail['description']);
        $this->see($this->parametersDetail['quantity']);
        $this->see($this->parametersDetail['price']);
        $this->see('Atrás');

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailGranted_Validate "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetOrderDetailGrantedForbiddenArea_Validate(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        //Agregar datos de prueba
        $this->purchaseOrderFields['order_state'] = config('constantes.aprobada'); //Cambiar el estado de orden de compra
        $this->purchaseOrderFields['id_area'] = 2; //Cambiar el área de orden de compra, siendo el usuario Rol Finanzas
        $this->savePurchaseOrderForSearch();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'] . '/validate';

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();


        $this->assertPageLoaded($uri);
        $this->see('Yapo.cl SpA');
        $this->see('Mariano Sánchez Fontecilla #310, of 1001');
        $this->see($this->purchaseOrderFields['folio_number']);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailGrantedForbiddenArea_Validate "."\033[32m OK \033[0m ". "\n");


    }

    public function testGetOrderDetailGrantedForbiddenArea2_Validate(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.gerencia'));

        //Agregar datos de prueba
        $this->purchaseOrderFields['order_state'] = config('constantes.aprobada'); //Cambiar el estado de orden de compra
        $this->purchaseOrderFields['id_area'] = 2; //Cambiar el área de orden de compra, siendo el usuario Rol Gerencia
        $this->savePurchaseOrderForSearch();

        //Alterar el gerente del área para que sea el usuario actual
        $area = Area::findBy('id_area', $this->purchaseOrderFields['id_area']);
        $oldManager = $area->id_user;
        $area->id_user = $user->id_user;
        $area->save();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number']. '/validate';

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();


        $area = Area::findBy('id_area', $this->purchaseOrderFields['id_area']);
        $area->id_user = $oldManager; //Retornar al área su gerente anterior
        $area->save();


        $this->assertPageLoaded($uri);
        $this->see('Yapo.cl SpA');
        $this->see('Mariano Sánchez Fontecilla #310, of 1001');
        $this->see($this->purchaseOrderFields['folio_number']);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailGrantedForbiddenArea2_Validate "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetOrderDetailDeniedForbiddenArea_Print(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1,));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.gerencia'));

        //Agregar datos de prueba
        $this->purchaseOrderFields['id_area'] = 2; //Cambiar el área de orden de compra, siendo el usuario Rol Gerencia
        $this->savePurchaseOrderForSearch();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'] . '/print';

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();


        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No puede imprimir órdenes de compra de otras áreas. Acceso denegado!");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailDeniedForbiddenArea_Print "."\033[32m OK \033[0m ". "\n");

    }


    public function testGetOrderDetailDeniedForbiddenArea2_Print(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.general'));

        //Agregar datos de prueba
        $this->purchaseOrderFields['id_area'] = 2; //Cambiar el área de orden de compra, siendo el usuario Rol Gerencia
        $this->savePurchaseOrderForSearch();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'] . '/print';

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();


        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No puede imprimir órdenes de compra de otras áreas. Acceso denegado!");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailDeniedForbiddenArea2_Print "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetOrderDetailDeniedForbiddenArea3_Print(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 200, 'id_area' => 1,));
        $this->be($user);
        $user->save();

        $user->detachRoles();
        $user->attachRole(config('constants.gerencia'));

        //Agregar datos de prueba
        $this->purchaseOrderFields['id_area'] = 2; //Cambiar el área de orden de compra, siendo el usuario Rol Gerencia
        $this->savePurchaseOrderForSearch();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'] . '/print';

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();
        $user->delete();

        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No puede imprimir órdenes de compra de otras personas. Acceso denegado!");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailDeniedForbiddenArea3_Print "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetOrderDetailGranted_Print(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.general'));

        //Agregar datos de prueba
        $this->savePurchaseOrderForSearch();
        $this->savePurchaseOrderDetailForTest();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'] . '/print';

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch(true);


        $this->assertPageLoaded($uri);
        $this->see('Yapo.cl SpA');
        $this->see('Mariano Sánchez Fontecilla #310, of 1001');
        $this->see($this->purchaseOrderFields['folio_number']);
        $this->see($this->parametersDetail['description']);
        $this->see($this->parametersDetail['quantity']);
        $this->see($this->parametersDetail['price']);
        $this->see('Atrás');

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailGranted_Print "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetOrderDetailGrantedForbiddenArea_Print(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        //Agregar datos de prueba
        $this->purchaseOrderFields['id_area'] = 2; //Cambiar el área de orden de compra, siendo el usuario Rol Finanzas
        $this->savePurchaseOrderForSearch();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'] . '/print';

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();


        $this->assertPageLoaded($uri);
        $this->see('Yapo.cl SpA');
        $this->see('Mariano Sánchez Fontecilla #310, of 1001');
        $this->see($this->purchaseOrderFields['folio_number']);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailGrantedForbiddenArea_Print "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetOrderDetailGrantedForbiddenArea2_Print(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.gerencia'));

        //Agregar datos de prueba
        $this->purchaseOrderFields['order_state'] = config('constantes.aprobada'); //Cambiar el estado de orden de compra
        $this->purchaseOrderFields['id_area'] = 2; //Cambiar el área de orden de compra, siendo el usuario Rol Gerencia
        $this->savePurchaseOrderForSearch();

        //Alterar el gerente del área para que sea el usuario actual
        $area = Area::findBy('id_area', $this->purchaseOrderFields['id_area']);
        $oldManager = $area->id_user;
        $area->id_user = $user->id_user;
        $area->save();

        $uri = '/detailPurchaseOrder/' . $this->purchaseOrderFields['folio_number'] . '/print';

        $this->call('GET', $uri);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();


        $area = Area::findBy('id_area', $this->purchaseOrderFields['id_area']);
        $area->id_user = $oldManager; //Retornar al área su gerente anterior
        $area->save();


        $this->assertPageLoaded($uri);
        $this->see('Yapo.cl SpA');
        $this->see('Mariano Sánchez Fontecilla #310, of 1001');
        $this->see($this->purchaseOrderFields['folio_number']);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testGetOrderDetailGrantedForbiddenArea2_Print "."\033[32m OK \033[0m ". "\n");

    }

    public function testApproveOrdersWithoutAreaAssigned(){

        Session::start();

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', 'aprobarOrdenes');

        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No puede aprobar ordenes de compra.
            Aún no tiene Área asignada. Por favor contacte al administrador de sistemas.");


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testApproveOrdersWithoutAreaAssigned "."\033[32m OK \033[0m ". "\n");

    }

    public function testApproveOrdersWithoutRolAssigned(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);
        $user->detachRoles();

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', 'aprobarOrdenes');
        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No tienes permiso para ver esa área");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testApproveOrdersWithoutRolAssigned "."\033[32m OK \033[0m ". "\n");

    }

    public function testApproveOrdersWithInsufficientPrivileges(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.general'));


        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', 'aprobarOrdenes');
        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No tienes permiso para ver esa área");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testApproveOrdersWithInsufficientPrivileges "."\033[32m OK \033[0m ". "\n");

    }

    public function seeInPageApproveOrders(){

        $this->see("Listado de Órdenes");
        $this->see("Aprobar Órdenes de Compra");
        $this->see("Nro. Orden");
        $this->see("Usuario");
        $this->see("Validar");

    }


    public function testApproveOrdersWithRolAndAreaAssigned(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->call('GET', 'aprobarOrdenes');
        $this->seeRouteIs("aprobarOrdenes");
        $this->seeInPageApproveOrders();


        $user->detachRoles();
        $user->attachRole(config('constants.gerencia'));

        $this->call('GET', 'aprobarOrdenes');
        $this->seeRouteIs("aprobarOrdenes");
        $this->seeInPageApproveOrders();
        
        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testApproveOrdersWithRolAndAreaAssigned "."\033[32m OK \033[0m ". "\n");

    }

    public function testValidateAreaBudget(){

        //Setear usuario
        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => TestData::areaFields['id_area']));
        $this->be($user);

        //Crear proveedor
        $provider = new Provider($this->providerFields);
        $provider->save();
        /** @var Provider $provider */
        $provider = Provider::findBy('name_provider', $this->providerFields['name_provider']);

        //Crear contrato
        $contractFields = TestData::ContractProvider($provider->id_provider);
        $contract = new Contract($contractFields);
        $contract->save();
        /** @var Contract $contract */
        $contract = Contract::findBy('id_provider', $provider->id_provider);

        $area = new Area(TestData::areaFields);
        $area->save();

        $this->seeInDatabase('areas',TestData::areaFields);

        $id_area = $area->id_area;

        $account_budget = new AccountBudget(TestData::accountBudgetFields_1);
        $account_budget->save();

        $this->seeInDatabase('account_budget',TestData::accountBudgetFields_1);

        $param_area_budget = TestData::areaBudgetFields;
        $param_area_budget['total_budget_initial'] = TestData::accountBudgetFields_1['total_budget_initial'];
        $param_area_budget['total_budget_available'] = TestData::accountBudgetFields_1['total_budget_available'];
        $area_budget = new AreasBudget($param_area_budget);
        $area_budget->save();

        $this->seeInDatabase('areas_budget',$param_area_budget);

        //Asignar la cuenta al contrato
        $accountContract = new AccountContract(TestData::getAccountContract($area->id_area, $account_budget->account_code,
                                                $contract->id_contract));
        $accountContract->save();

        $request = new Request();

        $request['moneda_origen'] = '2';
        $request['moneda_destino'] = 'CLP';
        $request['proveedor'] = $provider->name_provider .'-'. $contract->contract_number .'('. $contract->description .')';
        $request['id_area'] = $id_area;

        $montoMenor = rand(0, floatval(TestData::accountBudgetFields_1['total_budget_initial']));
        $montoMayor = rand(floatval(TestData::accountBudgetFields_1['total_budget_initial']), 100000);

        $this->assertLessThan(floatval(TestData::accountBudgetFields_1['total_budget_initial']), $montoMenor);
        $this->assertGreaterThan(floatval(TestData::accountBudgetFields_1['total_budget_initial']), $montoMayor);

        try{
            //Probamos que devuelva true
            $request['cantidad'] = $montoMenor;
            $respuesta = $this->controller->validateAreaBudget($request);
            $this->assertTrue($respuesta == 'true','OK');

            //Probamos que devuelva false
            $request['cantidad'] = $montoMayor;
            $respuesta = $this->controller->validateAreaBudget($request);
            $this->assertTrue($respuesta == 'false','OK');

        }catch (\Exception $e){
            //Borramos los datos si se cae
            $accountContract = AccountContract::findBy('id_contract', $contract->id_contract);
            $accountContract->delete();
            $contract->delete();
            $provider->delete();
            AreasBudget::deleteBudgets($id_area);
            AccountBudget::deleteBudgets($id_area);
            $area->delete();

            $this->fail('Falla en la prueba, revisar metodo validateAreaBudget()');
        }

        //Borramos los datos
        $accountContract = AccountContract::findBy('id_contract', $contract->id_contract);
        $accountContract->delete();
        $contract->delete();
        $provider->delete();
        AreasBudget::deleteBudgets($id_area);
        AccountBudget::deleteBudgets($id_area);
        $area->delete();

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testValidateAreaBudget "."\033[32m OK \033[0m ". "\n");
    }

    public function testCurrencyConverter(){

        $monedaDestino = \App\Models\Currency::PESO_CHILENO;
        $monto = 5000;

        //Pesos chilenos
        $monedaOrigen = 2;

        $valor = $this->controller->currencyConverter($monedaOrigen, $monedaDestino, $monto);
        $this->assertNotNull($valor);
        $this->assertEquals($valor, $monto);

        //Dolar
        $monedaOrigen = 3;

        $valor = $this->controller->currencyConverter($monedaOrigen, $monedaDestino, $monto);
        $this->assertNotNull($valor);
        $this->assertGreaterThan(0, $valor);
        $this->assertNotEquals($valor, $monto);

        //Euro
        $monedaOrigen = 4;

        $valor = $this->controller->currencyConverter($monedaOrigen, $monedaDestino, $monto);
        $this->assertNotNull($valor);
        $this->assertGreaterThan(0, $valor);
        $this->assertNotEquals($valor, $monto);

        //UF
        $monedaOrigen = 5;

        $valor = $this->controller->currencyConverter($monedaOrigen, $monedaDestino, $monto);
        $this->assertNotNull($valor);
        $this->assertGreaterThan($monto, $valor);
        $this->assertNotEquals($valor, $monto);

        //Corona Noruega
        $monedaOrigen = 6;

        $valor = $this->controller->currencyConverter($monedaOrigen, $monedaDestino, $monto);
        $this->assertNotNull($valor);
        $this->assertGreaterThan(0, $valor);
        $this->assertNotEquals($valor, $monto);

        //Corona Sueca
        $monedaOrigen = 7;

        $valor = $this->controller->currencyConverter($monedaOrigen, $monedaDestino, $monto);
        $this->assertNotNull($valor);
        $this->assertGreaterThan(0, $valor);
        $this->assertNotEquals($valor, $monto);

        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testApproveOrdersWithRolAndAreaAssigned "."\033[32m OK \033[0m ". "\n");


    }
    
    public function testRestoreBudget(){

        $dataAccount = TestData::accountBudgetFields_1;
        $dataAreaBudget = TestData::areaBudgetFields;

        $newOrder = Mockery::mock(PurchaseOrder::class);
        $newOrder->shouldReceive('getAttribute')->with('total_price')->andReturn($this->purchaseOrderFields['total_price']);
        $newOrder->shouldReceive('getAttribute')->with('exchange_rate')->andReturn(1);
        $newOrder->shouldReceive('getAttribute')->with('id_area')->andReturn($dataAccount['id_area']);

        $area = new Area(TestData::areaFields);
        $area->save();
        
        $newAccount =  new AccountBudget($dataAccount);
        $newAccount->save();
        
        $newAreaBudget = new AreasBudget($dataAreaBudget);
        $newAreaBudget->save();

        $this->controller->restoreBudget($newOrder, $newAccount->account_code);

        $this->dontSeeInDatabase('account_budget', $dataAccount);
        $this->dontSeeInDatabase('areas_budget', $dataAreaBudget);

        //Se restauró el monto en el presupuesto del área y de la cuenta
        $dataAccount['total_budget_available'] = $dataAccount['total_budget_available'] + $this->purchaseOrderFields['total_price'];
        $dataAreaBudget['total_budget_available'] = $dataAreaBudget['total_budget_available'] + $this->purchaseOrderFields['total_price'];

        $this->seeInDatabase('account_budget', $dataAccount);
        $this->seeInDatabase('areas_budget', $dataAreaBudget);

        //Eliminar datos
        AccountBudget::deleteBudgets($dataAccount['id_area']);
        AreasBudget::deleteBudgets($dataAccount['id_area']);

        $area = Area::findBy('long_name',$area->long_name);
        $area->delete();

        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testRestoreBudget "."\033[32m OK \033[0m ". "\n");
    }

    public function testDeleteNullPurchaseOrder(){

        $this->request['idOrden'] = 'ID_INEXISTENTE';

        $result = $this->controller->deletePurchaseOrder($this->request);

        $this->assertEquals(false, $result);

        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testDeleteNullPurchaseOrder "."\033[32m OK \033[0m ". "\n");

    }

    public function testDeleteRejectedPurchaseOrder(){

        $this->savePurchaseOrderForSearch();

        /** @var PurchaseOrder $order */
        $order = PurchaseOrder::findBy('folio_number', $this->purchaseOrderFields['folio_number']);
        $order->order_state = config('constants.rechazada'); //Cambiamos su estado a rechazada
        $order->save();

        $this->request['idOrden'] = $this->purchaseOrderFields['folio_number'];

        $result = $this->controller->deletePurchaseOrder($this->request);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();

        $this->assertEquals(false, $result);

        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testDeleteRejectedPurchaseOrder "."\033[32m OK \033[0m ". "\n");

    }

    public function createPurchaseOrderWithAccounts($dataArea,$dataContract,$dataAccount,$dataAreaBudget, $dataAccountContract){
        $area = new Area($dataArea);
        $area->save();

        $contract = new Contract($dataContract);
        $contract->id_contract = $this->purchaseOrderFields['id_contract'];
        $contract->save();

        $newAccount =  new AccountBudget($dataAccount);
        $newAccount->save();

        $newAreaBudget = new AreasBudget($dataAreaBudget);
        $newAreaBudget->save();

        $accountContract = new AccountContract($dataAccountContract);
        $accountContract->save();

        $this->purchaseOrderFields['id_area'] = $dataArea['id_area'];
        $order = new PurchaseOrder($this->purchaseOrderFields);
        $order->save();
    }

    public function deletePurchaseOrderWithAccounts($dataArea, $detail = false){

        if($detail){
            $deletePurchaseOrderDetail = PurchaseOrderDetail::findBy('id_purchase_order', $this->purchaseOrderFields['folio_number']);
            $deletePurchaseOrderDetail->delete();
        }
        $order = PurchaseOrder::findBy('folio_number', $this->purchaseOrderFields['folio_number']);
        $order->delete();

        AccountBudget::deleteBudgets($dataArea['id_area']);
        AreasBudget::deleteBudgets($dataArea['id_area']);
        AccountContract::deleteAccountsByContract($this->purchaseOrderFields['id_contract']);

        $contract = Contract::findBy('id_contract', $this->purchaseOrderFields['id_contract']);
        $contract->delete();


        $area = Area::findBy('long_name',$dataArea['long_name']);
        $area->delete();
    }


    public function addInvoiceRelation($id_invoice, $id_purchase_order, $subtotal, $rate, $sub_currency){

        $relation = new InvoicesOrders(['id_invoice' => $id_invoice, 'id_purchase_order' => $id_purchase_order,
                                        'subtotal' => $subtotal, 'exchange_rate' => $rate,
                                        'subtotal_po_currency' => $sub_currency]);
        $relation->save();
    }

    public function validateDeletePurchaseOrder($result, $dataAccount, $dataAreaBudget){
        $this->assertEquals("OK", $result);

        $this->dontSeeInDatabase('account_budget', $dataAccount);
        $this->dontSeeInDatabase('areas_budget', $dataAreaBudget);
        $this->dontSeeInDatabase('purchase_order', $this->purchaseOrderFields);

        //Se restauró el monto en el presupuesto del área y de la cuenta
        $dataAccount['total_budget_available'] = $dataAccount['total_budget_available'] + $this->purchaseOrderFields['total_price'];
        $dataAreaBudget['total_budget_available'] = $dataAreaBudget['total_budget_available'] + $this->purchaseOrderFields['total_price'];

        //Se eliminó la orden de compra
        $this->purchaseOrderFields['is_visible'] = 0;
        $this->purchaseOrderFields['order_state'] = config('constants.eliminada');

        $this->seeInDatabase('account_budget', $dataAccount);
        $this->seeInDatabase('areas_budget', $dataAreaBudget);
        $this->seeInDatabase('purchase_order', $this->purchaseOrderFields);
    }

    public function testDeletePurchaseOrder_ByRoss(){

        //Data de prueba
            $dataArea = TestData::areaFields;
            $dataContract = TestData::contractFields;
            $dataAccount = TestData::accountBudgetFields_1;
            $dataAreaBudget = TestData::areaBudgetFields;
            $dataAccountContract = TestData::getAccountContract(TestData::areaFields['id_area'],$dataAccount['account_code'],$this->purchaseOrderFields['id_contract']);

        $this->request['idOrden'] = $this->purchaseOrderFields['folio_number'];

        //Crear datos de presupuesto
        $this->createPurchaseOrderWithAccounts($dataArea,$dataContract,$dataAccount,$dataAreaBudget, $dataAccountContract);

        $result = $this->controller->deletePurchaseOrder($this->request);

        $this->validateDeletePurchaseOrder($result, $dataAccount, $dataAreaBudget);

        //Eliminar datos
        $this->deletePurchaseOrderWithAccounts($dataArea);

        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testDeletePurchaseOrder_ByRoss "."\033[32m OK \033[0m ". "\n");

    }
    
    public function testDeletePurchaseOrder_OldSystem(){

        //Data de prueba
        $dataArea = TestData::areaFields;
        $dataContract = TestData::contractFields;
        $dataAccount = TestData::accountBudgetFields_1;
        $dataAreaBudget = TestData::areaBudgetFields;
        $dataAccountContract = TestData::getAccountContract(TestData::areaFields['id_area'],$dataAccount['account_code'],$this->purchaseOrderFields['id_contract']);

        $this->request['idOrden'] = $this->purchaseOrderFields['folio_number'];

        //Crear datos de presupuesto
        $this->createPurchaseOrderWithAccounts($dataArea,$dataContract,$dataAccount,$dataAreaBudget, $dataAccountContract);

        $this->parametersDetail['description'] = $dataAccount['account_code'] . " " . $this->parametersDetail['description']; //Colocamos la cuenta en el detalle
        $this->savePurchaseOrderDetailForTest();

        $result = $this->controller->deletePurchaseOrder($this->request);

        $this->validateDeletePurchaseOrder($result, $dataAccount, $dataAreaBudget);

        //Eliminar datos
        $this->deletePurchaseOrderWithAccounts($dataArea,true);

        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testDeletePurchaseOrder_OldSystem "."\033[32m OK \033[0m ". "\n");
        
    }

    public function testDeletePurchaseOrderAssociatedToInvoice(){

        //Data de prueba
            $dataArea = TestData::areaFields;
            $dataContract = TestData::contractFields;
            $dataAccount = TestData::accountBudgetFields_1;
            $dataAreaBudget = TestData::areaBudgetFields;
            $dataInvoice = TestData::invoiceFields;
            $dataAccountContract = TestData::getAccountContract(TestData::areaFields['id_area'],$dataAccount['account_code'],$this->purchaseOrderFields['id_contract']);

        $this->request['idOrden'] = $this->purchaseOrderFields['folio_number'];

        //Crear datos de presupuesto
        $this->createPurchaseOrderWithAccounts($dataArea,$dataContract,$dataAccount,$dataAreaBudget, $dataAccountContract);

        //Crear la factura a asociar
        $invoice = new Invoice($dataInvoice);
        $invoice->save();
        $invoice = Invoice::findBy('id_document',$dataInvoice['id_document']);

        $this->addInvoiceRelation($invoice->id_invoice, $this->purchaseOrderFields['folio_number'], 50, 1, 50);

        //Validar que se creó correctamente
        $this->seeInDatabase('invoices_orders', ['id_invoice' => $invoice->id_invoice,
                                                        'id_purchase_order' => $this->purchaseOrderFields['folio_number'] ]);
        $this->assertEquals("50.00", InvoicesOrders::getTotalInvoiced($invoice->id_invoice)->total);

        $result = $this->controller->deletePurchaseOrder($this->request);

        //Validar que la eliminación fue correcta
        $this->validateDeletePurchaseOrder($result, $dataAccount, $dataAreaBudget);
        $this->dontSeeInDatabase('invoices_orders', ['id_invoice' => $invoice->id_invoice,
                                                            'id_purchase_order' => $this->purchaseOrderFields['folio_number'] ]);
        $this->assertEquals("0.00", InvoicesOrders::getTotalInvoiced($invoice->id_invoice)->total);

        //Eliminar datos
        $invoice = Invoice::findBy('id_invoice', $invoice->id_invoice);
        $invoice->delete();
        $this->deletePurchaseOrderWithAccounts($dataArea);

        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testDeletePurchaseOrderAssociatedToInvoice "."\033[32m OK \033[0m ". "\n");

    }

    public function testFilterPurchaseOrderWithWrongRol(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.general'));

        $this->call('GET', 'filtrarOrdenes');

        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No tienes permiso para ver esa área");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testFilterPurchaseOrderWithWrongRol "."\033[32m OK \033[0m ". "\n");

    }

    public function testFilterPurchaseOrderWithCorrectRol(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.gerencia'));

        $this->call('GET', 'filtrarOrdenes');
        $this->seeRouteIs("filtrarOrdenes");
        $this->see("Listado de Órdenes Filtradas");
        $this->see("Buscar Órdenes de Compra");


        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->call('GET', 'filtrarOrdenes');
        $this->seeRouteIs("filtrarOrdenes");
        $this->see("Listado de Órdenes Filtradas");
        $this->see("Buscar Órdenes de Compra");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testFilterPurchaseOrderWithCorrectRol "."\033[32m OK \033[0m ". "\n");

    }


    public function testFilterPurchaseOrderWithoutRolAssigned(){


        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);
        $user->detachRoles();

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', 'filtrarOrdenes');
        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No tienes permiso para ver esa área");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testFilterPurchaseOrderWithoutRolAssigned "."\033[32m OK \033[0m ". "\n");

    }

    public function testFilterOrderWithoutAreaAssigned(){

        Session::start();

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', 'filtrarOrdenes');

        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No puede buscar ordenes de compra.
            Aún no tiene Área asignada. Por favor contacte al administrador de sistemas.");

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testFilterOrderWithoutAreaAssigned "."\033[32m OK \033[0m ". "\n");

    }

    public function testFindPurchaseOrderByProviderName(){

        Session::start();

        $this->savePurchaseOrderForSearch();
        $this->visit("/filtrarOrdenes");

        //Asignamos como parámetro de búsqueda el nombre de proveedor
        $provider = Provider::find(TestData::contractFields['id_provider']);
        $this->request["search"] = ["value" => $provider->name_provider ];
        $json = $this->controller->filterPurchaseOrder($this->request);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch();

        $this->assertNotNull($json);

        $data = json_decode($json, true); //Decodificar el json

        $this->assertArrayHasKey('data', $data);
        $this->assertArrayHasKey('recordsTotal', $data);
        $this->assertArrayHasKey('iTotalDisplayRecords', $data);
        $this->assertArrayHasKey('recordsFiltered', $data);
        $this->assertArrayHasKey('draw', $data);

        $this->assertContains($this->purchaseOrderFields['folio_number'],$json);
        $this->assertContains($this->purchaseOrderFields['order_state'],$json);


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testFindPurchaseOrderByProviderName "."\033[32m OK \033[0m ". "\n");

    }

    public function testFindPurchaseOrderByDetailDescription(){

        Session::start();

        $this->savePurchaseOrderForSearch();
        $this->savePurchaseOrderDetailForTest();
        $this->visit("/filtrarOrdenes");

        //Asignamos como parámetro de búsqueda la descripción del detalle de la OC
        $this->request["search"] = ["value" => $this->parametersDetail['description'] ];
        $json = $this->controller->filterPurchaseOrder($this->request);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch(true);

        $this->assertNotNull($json);

        $data = json_decode($json, true); //Decodificar el json

        $this->assertArrayHasKey('data', $data);
        $this->assertArrayHasKey('recordsTotal', $data);
        $this->assertArrayHasKey('iTotalDisplayRecords', $data);
        $this->assertArrayHasKey('recordsFiltered', $data);
        $this->assertArrayHasKey('draw', $data);

        $this->assertContains($this->purchaseOrderFields['folio_number'],$json);
        $this->assertContains($this->purchaseOrderFields['order_state'],$json);


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testFindPurchaseOrderByDetailDescription "."\033[32m OK \033[0m ". "\n");

    }

    public function testFindPurchaseOrderWithNoParameters(){

        Session::start();

        $this->savePurchaseOrderForSearch();
        $this->savePurchaseOrderDetailForTest();
        $this->visit("/filtrarOrdenes");

        //Asignamos como parámetro de búsqueda la descripción del detalle de la OC
        $this->request["search"] = ["value" => "" ];
        $json = $this->controller->filterPurchaseOrder($this->request);

        //Eliminar datos antes de los asserts
        $this->deletePurchaseOrderForSearch(true);

        $data = json_decode($json, true); //Decodificar el json

        $this->assertArrayHasKey('data', $data);
        $this->assertArrayHasKey('recordsTotal', $data);
        $this->assertArrayHasKey('iTotalDisplayRecords', $data);
        $this->assertArrayHasKey('recordsFiltered', $data);
        $this->assertArrayHasKey('draw', $data);

        $this->assertNotContains($this->purchaseOrderFields['folio_number'],$json);
        $this->assertNotContains($this->purchaseOrderFields['order_state'],$json);


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderUnitTest:\033[0m testFindPurchaseOrderWithNoParameters "."\033[32m OK \033[0m ". "\n");

    }
    
    

}
