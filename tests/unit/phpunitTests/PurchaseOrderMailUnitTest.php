<?php

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

use Illuminate\Http\Request;

//include "tests/_support/Helper/MailTestHelper.php";
use Helper\MailTestHelper;

use App\Models\User;
use App\Models\PurchaseOrder;
use App\Models\AccountContract;
use App\Models\Contract;

use App\Http\Controllers\PurchaseOrderController;


//include "tests/_support/Page/TestData.php";
use Page\TestData;



class PurchaseOrderMailUnitTest extends TestCase
{

    /** @var  PurchaseOrderController */
    protected $controller;

    /** @var  Request */
    protected $request;

    protected $purchaseOrderFields;
    
    /** @var  MailTestHelper */
    protected $mail;

    
    public function setUp(){

        parent::setUp(); // TODO: Change the autogenerated stub

        //Setear usuario
        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        //Inicializar el controlador a probar
        $this->controller = new PurchaseOrderController();

        //Parámetros mínimos del request
        $this->resetRequest();

        //Data de prueba
        $this->purchaseOrderFields = TestData::purchaseOrderFields;

        $this->mail = new MailTestHelper();
        $this->mail->setupMailTest();
        
    }

    public function resetRequest(){
        //Parámetros mínimos del request
        $this->request = new Request();
        $this->request["payment_condition"] = 1;
        $this->request["payment_method"] = 1;
        $this->request["currency"] = 2;
    }


    public function tearDown()
    {
        Session::clear();
    }
    
    public function validateMail($type, $id_user, $id_order){
        
        switch($type){
            
            case "createOrder":

                $asunto = 'Orden de Compra Registrada';
                $mensaje = $id_order;
                $mail = $this->mail->getLastEmail();

                $order = PurchaseOrder::find($id_order);
                $area = Area::find($order->id_area);
                $gerente_area = User::find($area->id_user);

                $this->mail->assertEmailWasSendTo($gerente_area->email, $mail, $this);
                $this->mail->assertEmailSubjectIs($asunto, $mail, $this);
                $this->mail->assertEmailBodyContains($mensaje,$mail, $this);
                
                break;
            case "approveOrder";

                $asunto = 'Su Orden de Compra '.$id_order.' ha sido aprobada.';
                $mensaje = "Se le informa que mediante el Sistema de Ordenes de Compra de Yapo.cl la siguiente orden ha sido aprobada";
                $mail = $this->mail->getLastEmail();

                /** @var User $user */
                $user = User::findOrFail($id_user);

                $this->mail->assertEmailWasSendTo($user->email, $mail, $this);
                $this->mail->assertEmailSubjectIs($asunto, $mail, $this);
                $this->mail->assertEmailBodyContains($mensaje,$mail, $this);

                
                break;
            case "rejectOrder";

                $asunto = 'Su Orden de Compra '.$id_order.' ha sido rechazada.';
                $mensaje = "Se le informa que mediante el Sistema de Ordenes de Compra de Yapo.cl la siguiente orden ha sido rechazada";
                $mail = $this->mail->getLastEmail();

                /** @var User $user */
                $user = User::findOrFail($id_user);

                $this->mail->assertEmailWasSendTo($user->email, $mail, $this);
                $this->mail->assertEmailSubjectIs($asunto, $mail, $this);
                $this->mail->assertEmailBodyContains($mensaje,$mail, $this);
                $this->mail->assertEmailBodyContains("Motivo de rechazo:",$mail, $this);

                break;
            default: 
                break;
        }        
        
    }

    public function savePurchaseOrderForSearch(){

        $contract = new Contract(TestData::contractFields);
        $contract['id_contract'] = $this->purchaseOrderFields['id_contract'];
        $contract->save();

        $order = new PurchaseOrder($this->purchaseOrderFields);
        $order->save();
    }

    /**
     * @param $deletePurchaseOrder 
     * @param null $account_contract
     */
    public function deletePurchaseOrderForSearch($deletePurchaseOrder, $account_contract = null){

        if($account_contract != null){
            $account_contract = AccountContract::getAccount($this->purchaseOrderFields['id_contract'],'2017', $account_contract->account_code);
            $account_contract->delete();
        }
        $deletePurchaseOrder->delete();
        $contract = Contract::findBy('id_contract', $this->purchaseOrderFields['id_contract']);
        $contract->delete();
    }


    public function testApprovePurchaseOrder(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->visit("/aprobarOrdenes");

        $this->savePurchaseOrderForSearch();

        $this->controller->approvePurchaseOrder($this->request, $this->purchaseOrderFields['folio_number']);

        $this->dontSeeInDatabase('purchase_order',$this->purchaseOrderFields);

        $newParameters = $this->purchaseOrderFields;
        $newParameters['order_state'] = config('constants.aprobada');
        $this->seeInDatabase('purchase_order', $newParameters);

        //Eliminar datos
        $deletePurchaseOrder = PurchaseOrder::findBy('folio_number', $this->purchaseOrderFields['folio_number']);
        $userOrder = $deletePurchaseOrder->id_user;
        $this->deletePurchaseOrderForSearch($deletePurchaseOrder);

        //Validar contenido correo enviado al usuario que creó la orden
        $this->validateMail("approveOrder", $userOrder,  $this->purchaseOrderFields['folio_number']);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderMailUnitTest:\033[0m testApprovePurchaseOrder "."\033[32m OK \033[0m ". "\n");

    }

    public function testRejectPurchaseOrder(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10, 'id_area' => 1));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->visit("/aprobarOrdenes");

        $this->savePurchaseOrderForSearch();

        $account_contract = new AccountContract(['id_contract' => $this->purchaseOrderFields['id_contract'],
                                                'id_area' => $this->purchaseOrderFields['id_area'],
                                                'account_code' => '8080',
                                                'account_year' => '2017'] );

        $account_contract->save();

        $this->controller->rejectPurchaseOrder($this->request, $this->purchaseOrderFields['folio_number']);

        $this->dontSeeInDatabase('purchase_order',$this->purchaseOrderFields);
        $newParameters = $this->purchaseOrderFields;
        $newParameters['order_state'] = config('constants.rechazada');

        $this->seeInDatabase('purchase_order', $newParameters);

        //Eliminar datos
        $deletePurchaseOrder = PurchaseOrder::findBy('folio_number', $this->purchaseOrderFields['folio_number']);
        $userOrder = $deletePurchaseOrder->id_user;
        $this->deletePurchaseOrderForSearch($deletePurchaseOrder,$account_contract);

        //Validar contenido correo enviado al usuario que creó la orden
        $this->validateMail("rejectOrder", $userOrder,  $this->purchaseOrderFields['folio_number']);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PurchaseOrderMailUnitTest:\033[0m testRejectPurchaseOrder "."\033[32m OK \033[0m ". "\n");

    }
    

    
}
