<?php

use App\Http\Controllers\PaymentConditionController;

use Illuminate\Http\Request;

use App\Models\User;
use App\Models\Area;
use App\Models\PaymentCondition;

use Page\TestData;

class PaymentConditionUnitTest extends TestCase
{

    /** @var  PaymentConditionController */
    protected $controller;

    /** @var  Area */
    protected $area;

    /** @var  Request */
    protected $request;

    public $paymentFields;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        //Setear usuario
        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        //Inicializar el controlador a probar
        $this->controller = new PaymentConditionController();

        //Parámetros mínimos del request
        $this->request = new Request();

        //Data de prueba
        $this->paymentFields = [ 'id_payment_conditions'   => 777,
                                 'name_condition' => 'Pago en 3 meses' ];

    }

    public function tearDown()
    {
        Mockery::close();
        Session::clear();
    }

    public function testListPaymentsWithoutRolAssigned(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', '/paymentconditions');
        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No tienes permiso para ver esa área");


        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m PaymentConditionUnitTest:\033[0m testListPaymentsWithoutRolAssigned "."\033[32m OK \033[0m ".PHP_EOL );
    }

    public function testListPaymentRejectedWithWrongRolAssigned(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.general'));

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', '/paymentconditions');
        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No tienes permiso para ver esa área");

        $user->detachRoles();
        $user->attachRole(config('constants.gerencia'));

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', '/paymentconditions');
        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No tienes permiso para ver esa área");


        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m PaymentConditionUnitTest:\033[0m testListPaymentRejectedWithWrongRolAssigned "."\033[32m OK \033[0m ".PHP_EOL);
    }

    public function testListPaymentsWithRolAssigned(){


        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', '/paymentconditions');

        $this->see('Listado de Condiciones de Pago');
        $this->see(' Agregar Condición de Pago');
        $this->see('Condición de Pago');

        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m PaymentConditionUnitTest:\033[0m testListPaymentsWithRolAssigned "."\033[32m OK \033[0m ".PHP_EOL );
    }

    public function testCreatePaymentCondition(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', '/paymentconditions/create');

        $this->see('Agregar/Editar Condición de Pago');
        $this->see('Condición de Pago');
        $this->seeElement('input', ['name' => 'name_condition']);

        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m PaymentConditionUnitTest:\033[0m testCreatePaymentCondition "."\033[32m OK \033[0m ".PHP_EOL );

    }


    public function savePaymentForSearch(){

        $payment = new PaymentCondition($this->paymentFields);
        $payment->save();

    }

    public function seePaymentInPage(){
        $this->see('Condición de Pago');
        $this->seeInField('#name_condition', $this->paymentFields['name_condition']);
    }

    public function testShowPayment(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->savePaymentForSearch();

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', '/paymentconditions/'. $this->paymentFields['id_payment_conditions']);

        //Eliminar datos antes de los asserts
        $payment = PaymentCondition::find($this->paymentFields['id_payment_conditions']);
        $payment->delete();


        $this->see('Detalle de Condición de Pago');
        $this->seePaymentInPage();
        $this->see('Id de Condición de Pago');
        $this->seeInField('#id_payment_conditions', $this->paymentFields['id_payment_conditions']);

        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m PaymentConditionUnitTest:\033[0m testShowPayment "."\033[32m OK \033[0m ".PHP_EOL );

    }

    public function testEditPayment(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->savePaymentForSearch();

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', '/paymentconditions/'. $this->paymentFields['id_payment_conditions'] .'/edit');

        //Eliminar datos antes de los asserts
        $payment = PaymentCondition::find($this->paymentFields['id_payment_conditions']);
        $payment->delete();


        $this->see('Agregar/Editar Condición de Pago');
        $this->seePaymentInPage();

        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m PaymentConditionUnitTest:\033[0m testEditPayment "."\033[32m OK \033[0m ".PHP_EOL );

    }

    public function testFindPayment(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->savePaymentForSearch();

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->call('GET', '/paymentconditions');

        $this->request["search"] = ["value" => $this->paymentFields['name_condition'] ];
        $json = $this->controller->grid($this->request);


        //Eliminar datos antes de los asserts
        $payment = PaymentCondition::find($this->paymentFields['id_payment_conditions']);
        $payment->delete();

        $this->assertNotNull($json);

        $data = json_decode($json, true); //Decodificar el json


        $this->assertArrayHasKey('data', $data);
        $this->assertArrayHasKey('recordsTotal', $data);
        $this->assertArrayHasKey('iTotalDisplayRecords', $data);
        $this->assertArrayHasKey('recordsFiltered', $data);
        $this->assertArrayHasKey('draw', $data);

        $this->assertGreaterThanOrEqual(1,$data['recordsTotal']);

        $this->assertContains($this->paymentFields['name_condition'],$json);
        $this->assertContains(strval($this->paymentFields['id_payment_conditions']),$json);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PaymentConditionUnitTest:\033[0m testFindPayment "."\033[32m OK \033[0m ". "\n");

    }

    public function testValidatePaymentWithouttName(){

        $this->expectException(\Illuminate\Validation\ValidationException::class);
        $this->controller->validateFormPaymentCondition($this->request);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PaymentConditionUnitTest:\033[0m testValidatePaymentWithouttName "."\033[32m OK \033[0m ". "\n");

    }

    public function testPassValidatePayment(){

        $this->request["name_condition"] = "Nombre obligatorio"; //Llenar el dato necesario
        $this->controller->validateFormPaymentCondition($this->request);

        $this->addToAssertionCount(1);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PaymentConditionUnitTest:\033[0m testPassValidatePayment "."\033[32m OK \033[0m ". "\n");
    }

    public function testDestroyPayment(){

        $this->savePaymentForSearch();

        $this->controller->destroy($this->request, $this->paymentFields['id_payment_conditions']);

        $this->dontSeeInDatabase('payment_conditions', $this->paymentFields);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PaymentConditionUnitTest:\033[0m testDestroyPayment "."\033[32m OK \033[0m ". "\n");

    }

    public function testStorePayment(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        //Setear campos en el request
        $this->request['id_payment_conditions'] = 0;
        $this->request["name_condition"] = $this->paymentFields['name_condition'];

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->call('GET', '/paymentconditions');

        $this->controller->store($this->request);

        unset($this->paymentFields['id_payment_conditions']);

        $this->seeInDatabase('payment_conditions', $this->paymentFields);
        $this->see('Listado de Condiciones de Pago');

        //Eliminar los datos
        $payment = PaymentCondition::findBy('name_condition',$this->paymentFields['name_condition']);
        $payment->delete();


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PaymentConditionUnitTest:\033[0m testStorePayment "."\033[32m OK \033[0m ". "\n");

    }

    public function testUpdatePayment(){

        $this->savePaymentForSearch();
        $payment = PaymentCondition::find($this->paymentFields['id_payment_conditions']);

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $random = rand(0,9);
        $newShortName = "TS" . $random;

        //Setear campos en el request
        $this->request['id_payment_conditions'] = $this->paymentFields['id_payment_conditions'];
        $this->request["name_condition"] = $newShortName;

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->call('GET', '/paymentconditions');

        $this->see("Listado de Condiciones de Pago");

        $this->controller->update($this->request);


        $this->dontSeeInDatabase('payment_conditions', $this->paymentFields);
        $this->paymentFields['name_condition'] = $newShortName;
        $this->seeInDatabase('payment_conditions', $this->paymentFields);
        $this->see('Listado de Condiciones de Pago');

        //Eliminar los datos
        $payment->delete();

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m PaymentConditionUnitTest:\033[0m testUpdatePayment "."\033[32m OK \033[0m ". "\n");
        
    }

}