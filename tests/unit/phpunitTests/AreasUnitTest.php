<?php

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

use App\Http\Controllers\AreasController;

use Illuminate\Http\Request;

use App\Models\User;
use App\Models\Area;
use App\Models\AreasBudget;
use App\Models\AccountBudget;


//include "tests/_support/Page/TestData.php";
use Page\TestData;

class AreasUnitTest extends TestCase
{
    /** @var  AreasController */
    protected $controller;

    /** @var  Area */
    protected $area;

    /** @var  Request */
    protected $request;

    public $areaFields;
    public $areaClosedFields;
    protected $userFields;
    protected $budgetFields;
    protected $budgetFields2;
    protected $accountbudgetFields;
    protected $accountbudgetFields2;


    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        //Setear usuario
        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        //Inicializar el controlador a probar
        $this->controller = new AreasController();

        //Parámetros mínimos del request
        $this->resetRequest();

        //Data de prueba
        $this->areaFields = TestData::areaFields;
        $this->areaClosedFields = TestData::areaClosedFields;
        $this->userFields = TestData::userFields;
        $this->budgetFields = TestData::areaBudgetFields;
        $this->budgetFields2 = TestData::areaBudgetFields_2;
        $this->accountbudgetFields = TestData::accountBudgetFields_1;
        $this->accountbudgetFields2 = TestData::accountBudgetFields_2;

    }

    public function resetRequest(){
        //Parámetros mínimos del request
        $this->request = new Request();
    }

    public function tearDown()
    {
        Mockery::close();
        Session::clear();
    }


    public function testListAreasWithoutRolAssigned(){

        Session::start();
        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);
        $user->detachRoles();

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', '/areas');
        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No tienes permiso para ver esa área");


        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testListAreasWithoutRolAssigned "."\033[32m OK \033[0m ".PHP_EOL );
    }

    public function testListAreasRejectedWithWrongRolAssigned(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.general'));

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', '/areas');
        $this->assertRedirectedToRoute("home");
        $this->assertArrayHasKey('error_message',Session::all(),"No tienes permiso para ver esa área");


        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testListAreasRejectedWithWrongRolAssigned "."\033[32m OK \033[0m ".PHP_EOL);
    }



    public function testListAreasWithRolAssigned(){


        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', '/areas');

        $this->see('Listado de Áreas');
        $this->see('Agregar Área');
        $this->see('Abreviatura');
        $this->see('Nombre');
        $this->see('Gerente');
        $this->see('Cargo Gerente');

        $user->detachRoles();
        $user->attachRole(config('constants.gerencia'));

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', '/areas');

        $this->see('Listado de Áreas');
        $this->see('Abreviatura');
        $this->see('Nombre');
        $this->see('Gerente');
        $this->see('Cargo Gerente');


        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testListAreasWithRolAssigned "."\033[32m OK \033[0m ".PHP_EOL );
    }

    public function testCreateArea(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->visit("/")->see("Sistema de Órdenes de compra");

        $this->call('GET', '/areas/create');

        $this->see('Agregar/Editar Área');
        $this->see('Abreviatura');
        $this->seeElement('input', ['name' => 'short_name']);
        $this->see('Nombre de Área');
        $this->seeElement('input', ['name' => 'long_name']);
        $this->see('Gerente');
        $this->seeElement('input', ['name' => 'manager_name']);
        $this->see('Cargo Gerente');
        $this->seeElement('input', ['name' => 'manager_position']);
        $this->see('Presupuestos Anuales');
        $this->see('Agregar Cuenta');
        $this->seeElement('input', ['name' => 'year_budget']);
        $this->seeElement('input', ['name' => 'initial_budget']);
        $this->seeElement('input', ['name' => 'account_name']);
        $this->seeElement('input', ['name' => 'account_name']);
        $this->seeElement('input', ['name' => 'description']);

        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testCreateArea "."\033[32m OK \033[0m ".PHP_EOL );

    }
    
    public function saveAreaForSearch($closed = null){
        
        $user = new User($this->userFields);
        $user->save();

        if($closed != null){
            $area = new Area($this->areaClosedFields);
            $area->save();
        }else{
            $area = new Area($this->areaFields);
            $area->save();
        }
        
    }

    public function seeAreaInPage(){
        $this->see('Abreviatura');
        $this->seeInField('#short_name', $this->areaFields['short_name']);
        $this->see('Nombre de Área');
        $this->seeInField('#long_name', $this->areaFields['long_name']);
        $this->see('Gerente');
        $this->seeInField('#manager_name', $this->areaFields['manager_name']);
        $this->see('Cargo Gerente');
        $this->seeInField('#manager_position', $this->areaFields['manager_position']);
    }

    public function testGetDetailFromForbiddenArea(){

        Session::start();

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.gerencia'));

        $this->saveAreaForSearch();

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->call('GET', '/areas/'. $this->areaFields['id_area']);

        //Eliminar datos antes de los asserts
        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();

        $this->assertArrayHasKey('error_message',Session::all(),"No tiene permiso para consultar esa área.");

        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testGetDetailFromForbiddenArea "."\033[32m OK \033[0m ".PHP_EOL );
    }

    public function testShowAreaWithoutBudget(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->saveAreaForSearch();

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->call('GET', '/areas/'. $this->areaFields['id_area']);

        //Eliminar datos antes de los asserts
        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();


        $this->see('Detalle de Área');
        $this->seeAreaInPage();
        $this->see('Presupuestos Anuales');
        $this->see('Año');
        $this->see('Presupuesto Anual');
        $this->see('Monto Disponible');
        $this->see('No hay registros disponibles');

        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testShowAreaWithoutBudget "."\033[32m OK \033[0m ".PHP_EOL );

    }

    public function testShowAreaWithBudgetNotClosed(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->saveAreaForSearch();
        $budget = new AccountBudget($this->accountbudgetFields);
        $budget->save();
        $budget = new AccountBudget($this->accountbudgetFields2);
        $budget->save();

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->call('GET', '/areas/'. $this->areaFields['id_area']);

        //Eliminar datos antes de los asserts
        AccountBudget::deleteBudgets($this->areaFields['id_area']);

        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();


        $this->see('Detalle de Área');
        $this->seeAreaInPage();
        $this->see('Presupuestos Anuales');
        $this->see('Año');
        $this->see('Presupuesto Anual');
        $this->see('Monto Disponible');

        $today = getdate();

        $this->see($today['year']);
        $montoIni = $this->accountbudgetFields['total_budget_initial'] + $this->accountbudgetFields2['total_budget_initial'];
        $montoDisp = $this->accountbudgetFields['total_budget_available'] + $this->accountbudgetFields2['total_budget_available'];
        $this->see(number_format($montoIni,2,',','.'));
        $this->see(number_format($montoDisp,2,',','.'));

        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testShowAreaWithBudgetNotClosed "."\033[32m OK \033[0m ".PHP_EOL );

    }

    public function testShowAreaWithBudgetClosed(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->saveAreaForSearch(true);
        $budget = new AreasBudget($this->budgetFields);
        $budget->save();

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->call('GET', '/areas/'. $this->areaFields['id_area']);

        //Eliminar datos antes de los asserts
        $budget = AreasBudget::getBudget($this->areaFields['id_area'], $this->budgetFields['budget_year']);
        $budget->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();


        $this->see('Detalle de Área');
        $this->seeAreaInPage();
        $this->see('Presupuestos Anuales');
        $this->see('Año');
        $this->see('Presupuesto Anual');
        $this->see('Monto Disponible');

        $this->see(number_format($this->budgetFields['total_budget_initial'],2,',','.'));
        $this->see(number_format($this->budgetFields['total_budget_available'],2,',','.'));

        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testShowAreaWithBudgetClosed "."\033[32m OK \033[0m ".PHP_EOL );

    }

    public function testEditArea(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->saveAreaForSearch();

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->call('GET', '/areas/'. $this->areaFields['id_area'] .'/edit');

        //Eliminar datos antes de los asserts
        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();


        $this->see('Agregar/Editar Área');
        $this->seeAreaInPage();
        $this->see('Presupuestos Anuales');
        $this->see('Año');
        $this->dontSee('Presupuesto Anual');
        $this->see('Monto');
        $this->seeElement('input', ['name' => 'year_budget']);
        $this->seeElement('input', ['name' => 'initial_budget']);
        $this->seeElement('input', ['name' => 'account_name']);
        $this->seeElement('input', ['name' => 'account_name']);
        $this->seeElement('input', ['name' => 'description']);

        $today = getdate();
        $this->seeInField('year_budget',$today['year']);


        fwrite(STDOUT, "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testEditArea "."\033[32m OK \033[0m ".PHP_EOL );

    }

    public function testFindArea(){
        
        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->saveAreaForSearch();

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->request["search"] = ["value" => $this->areaFields['short_name'] ];
        $json = $this->controller->grid($this->request);


        //Eliminar datos antes de los asserts
        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();

        $this->assertNotNull($json);

        $data = json_decode($json, true); //Decodificar el json


        $this->assertArrayHasKey('data', $data);
        $this->assertArrayHasKey('recordsTotal', $data);
        $this->assertArrayHasKey('iTotalDisplayRecords', $data);
        $this->assertArrayHasKey('recordsFiltered', $data);
        $this->assertArrayHasKey('draw', $data);

        $this->assertGreaterThanOrEqual(1,$data['recordsTotal']);

        $this->assertContains($this->areaFields['short_name'],$json);
        $this->assertContains($this->areaFields['long_name'],$json);
        $this->assertContains($this->areaFields['manager_name'],$json);
        $this->assertContains($this->areaFields['manager_position'],$json);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testFindArea "."\033[32m OK \033[0m ". "\n");

    }

    public function testNotFindAreaByManager(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.gerencia'));

        $this->saveAreaForSearch();

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->request["search"] = ["value" => $this->areaFields['short_name'] ];
        $json = $this->controller->grid($this->request);


        //Eliminar datos antes de los asserts
        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();

        $this->assertNotNull($json);

        $data = json_decode($json, true); //Decodificar el json


        $this->assertArrayHasKey('data', $data);
        $this->assertArrayHasKey('recordsTotal', $data);
        $this->assertArrayHasKey('iTotalDisplayRecords', $data);
        $this->assertArrayHasKey('recordsFiltered', $data);
        $this->assertArrayHasKey('draw', $data);

        $this->assertGreaterThanOrEqual(1,$data['recordsTotal']);

        $this->assertNotContains($this->areaFields['short_name'],$json);
        $this->assertNotContains($this->areaFields['long_name'],$json);
        $this->assertNotContains($this->areaFields['manager_name'],$json);
        $this->assertNotContains($this->areaFields['manager_position'],$json);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testNotFindAreaByManager "."\033[32m OK \033[0m ". "\n");

    }

    public function testCreateAccountBudget(){

        $year='2017';
        $amount='10000000';
        $id='55';
        $code = "6060";
        $name = "Prueba de presupuesto de cuenta";
        $desc = "Descripción de prueba para la cuenta";


        $budget = $this->controller->createAccountBudget($id,$year,$amount, $code, $name, $desc);

        $this->assertInstanceOf(AccountBudget::class,$budget);
        $this->assertEquals($year, $budget->budget_year);
        $this->assertEquals($id, $budget->id_area);
        $this->assertEquals($code, $budget->account_code);
        $this->assertEquals($name, $budget->account_name);
        $this->assertEquals($desc, $budget->description);
        $this->assertEquals(floatval($amount), $budget->total_budget_initial);
        $this->assertEquals(floatval($amount), $budget->total_budget_available);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testCreateAccountBudget "."\033[32m OK \033[0m ". "\n");

    }

    public function testValidateAreaWithoutShortName(){

        $this->expectException(\Illuminate\Validation\ValidationException::class);
        $this->controller->validateFormArea($this->request);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testValidateAreaWithoutShortName "."\033[32m OK \033[0m ". "\n");

    }

    public function testValidateAreaWithoutLongName(){

        $this->request["short_name"] = "AAAA"; //Llenar el último dato necesario
        $this->expectException(\Illuminate\Validation\ValidationException::class);
        $this->controller->validateFormArea($this->request);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testValidateAreaWithoutLongName "."\033[32m OK \033[0m ". "\n");
    }

    public function testValidateAreaWithoutManagerName(){

        $this->request["short_name"] = "AAAA"; //Llenar el último dato necesario
        $this->request["long_name"] = "Area de Prueba"; //Llenar el último dato necesario
        $this->expectException(\Illuminate\Validation\ValidationException::class);
        $this->controller->validateFormArea($this->request);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testValidateAreaWithoutManagerName "."\033[32m OK \033[0m ". "\n");
    }

    public function testValidateAreaWithoutManagerPosition(){

        $this->request["short_name"] = "AAAA"; //Llenar el último dato necesario
        $this->request["long_name"] = "Area de Prueba"; //Llenar el último dato necesario
        $this->request["manager_name"] = "Ana"; //Llenar el último dato necesario
        $this->expectException(\Illuminate\Validation\ValidationException::class);
        $this->controller->validateFormArea($this->request);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testValidateAreaWithoutManagerPosition "."\033[32m OK \033[0m ". "\n");
    }

    public function testPassValidateArea(){

        $this->request["short_name"] = "AAAA"; //Llenar el último dato necesario
        $this->request["long_name"] = "Area de Prueba"; //Llenar el último dato necesario
        $this->request["manager_name"] = "Ana"; //Llenar el último dato necesario
        $this->request["manager_position"] = "Gerente"; //Llenar el último dato necesario
        $this->controller->validateFormArea($this->request);

        $this->addToAssertionCount(1);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testPassValidateArea "."\033[32m OK \033[0m ". "\n");
    }

    public function testGetUsers(){

        $user = new User($this->userFields);
        $user->save();

        $json= $this->controller->getUsers();

        //Eliminar datos antes de los asserts
        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $this->assertNotNull($json);

        $this->assertContains($this->userFields['firstname'] . ' ' . $this->userFields['lastname'] ,$json->getContent());
        $this->assertContains(strval($this->userFields['id_user']), $json->getContent());

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testGetUsers "."\033[32m OK \033[0m ". "\n");
    }

    public function testGetExistingAccountBudget(){

        $this->saveAreaForSearch();

        $budget = new AccountBudget($this->accountbudgetFields);
        $budget->save();

        $json = $this->controller->getBudgets($this->request, $this->accountbudgetFields['id_area']);

        //Eliminar los datos antes de los asserts
        $budget = AccountBudget::getBudget($this->areaFields['id_area'], $this->accountbudgetFields['budget_year'], $this->accountbudgetFields['account_code']);
        $budget->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();

        $this->assertNotNull($json);


        $data = json_decode($json, true); //Decodificar el json


        $this->assertArrayHasKey('data', $data);
        $this->assertArrayHasKey('recordsTotal', $data);
        $this->assertArrayHasKey('iTotalDisplayRecords', $data);
        $this->assertArrayHasKey('recordsFiltered', $data);
        $this->assertArrayHasKey('draw', $data);

        $this->assertEquals(1,$data['recordsTotal']);

        $this->assertContains($this->accountbudgetFields['budget_year'],$json);
        $this->assertContains(number_format($this->accountbudgetFields['total_budget_initial'],0,',','.'),$json);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testGetExistingAccountBudget "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetBudgetNonSpecifiedArea(){


        $json = $this->controller->getBudgets($this->request); //No se envia ID de area

        $this->assertNotNull($json);

        $data = json_decode($json, true); //Decodificar el json

        $this->assertArrayHasKey('data', $data);
        $this->assertArrayHasKey('recordsTotal', $data);
        $this->assertArrayHasKey('iTotalDisplayRecords', $data);
        $this->assertArrayHasKey('recordsFiltered', $data);
        $this->assertArrayHasKey('draw', $data);

        $this->assertEquals(0,$data['recordsTotal']); //No retorna nada

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testGetBudgetNonSpecifiedArea "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetSpecificAccountBudget(){

        $this->saveAreaForSearch();

        $budget = new AccountBudget($this->accountbudgetFields);
        $budget->save();

        $budget2 = new AccountBudget($this->accountbudgetFields2);
        $budget2->save();

        $this->request["search"] = ["value" => $budget2['account_code'] ]; //Especificar parametro de busqueda

        $json = $this->controller->getBudgets($this->request, $this->accountbudgetFields['id_area']);

        //Eliminar los datos antes de los asserts

        AccountBudget::deleteBudgets($this->accountbudgetFields['id_area']);

        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();

        $this->assertNotNull($json);

        $data = json_decode($json, true); //Decodificar el json

        $this->assertArrayHasKey('data', $data);
        $this->assertArrayHasKey('recordsTotal', $data);
        $this->assertArrayHasKey('iTotalDisplayRecords', $data);
        $this->assertArrayHasKey('recordsFiltered', $data);
        $this->assertArrayHasKey('draw', $data);

        $this->assertEquals(2,$data['recordsTotal']);

        $this->assertContains($this->accountbudgetFields2['budget_year'],$json);
        $this->assertContains($this->accountbudgetFields2['account_code'],$json);
        $this->assertContains($this->accountbudgetFields2['account_name'],$json);
        $this->assertContains($this->accountbudgetFields2['description'],$json);
        $this->assertContains(number_format($this->accountbudgetFields2['total_budget_initial'],0,',','.'),$json);

        $this->assertNotContains($this->accountbudgetFields['account_code'],$json);
        $this->assertNotContains($this->accountbudgetFields['account_name'],$json);
        $this->assertNotContains($this->accountbudgetFields['description'],$json);
        $this->assertNotContains(number_format($this->accountbudgetFields['total_budget_initial'],0,',','.'),$json);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testGetSpecificAccountBudget "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetBudgetAvailableForAreaClosedWithAccounts(){

        $this->saveAreaForSearch(true);

        $budget = new AreasBudget($this->budgetFields);
        $budget->save();

        $json = $this->controller->getBudgetAvailableByArea($this->budgetFields['id_area'], $this->budgetFields['budget_year']);

        //Eliminar los datos antes de los asserts
        AreasBudget::deleteBudgets($this->budgetFields['id_area']);

        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();

        $this->assertNotNull($json);

        $this->assertContains($this->budgetFields['budget_year'],$json->getContent());
        $this->assertContains($this->budgetFields['total_budget_initial'],$json->getContent());


        $data = json_decode($json->getContent(),true); //Decodificar el json

        $this->assertArrayHasKey('id_area', $data);
        $this->assertArrayHasKey('budget_year', $data);
        $this->assertArrayHasKey('total_budget_initial', $data);
        $this->assertArrayHasKey('total_budget_available', $data);

        $this->assertArrayNotHasKey('account_name', $data);
        $this->assertArrayNotHasKey('account_code', $data);
        $this->assertArrayNotHasKey('description', $data);

        $this->assertEquals(1,sizeof($json->getContent()));


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testGetBudgetAvailableForAreaClosedWithAccounts "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetBudgetAvailableForAreaWithAccounts(){

        $this->saveAreaForSearch();

        $budget = new AccountBudget($this->accountbudgetFields);
        $budget->save();

        $budget2 = new AccountBudget($this->accountbudgetFields2);
        $budget2->save();

        $json = $this->controller->getBudgetAvailableByAccounts($this->accountbudgetFields['id_area'], $this->accountbudgetFields['budget_year']);

        //Eliminar los datos antes de los asserts
        AccountBudget::deleteBudgets($this->budgetFields['id_area']);

        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();

        $this->assertNotNull($json);

        $montoIni = $this->accountbudgetFields['total_budget_initial'] + $this->accountbudgetFields2['total_budget_initial'];
        $montoDisp = $this->accountbudgetFields['total_budget_available'] + $this->accountbudgetFields2['total_budget_available'];

        $this->assertContains(number_format($montoIni,2,'.',''),$json->getContent());
        $this->assertContains(number_format($montoDisp,2,'.',''),$json->getContent());

        $data = json_decode($json->getContent(),true); //Decodificar el json

        $this->assertEquals(1,sizeof($data));

        $this->assertArrayHasKey('budget_year', $data[0]);
        $this->assertArrayHasKey('total_budget_initial', $data[0]);
        $this->assertArrayHasKey('total_budget_available', $data[0]);

        $this->assertArrayNotHasKey('id_area', $data[0]);
        $this->assertArrayNotHasKey('account_name', $data[0]);
        $this->assertArrayNotHasKey('account_code', $data[0]);
        $this->assertArrayNotHasKey('description', $data[0]);

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testGetBudgetAvailableForAreaWithAccounts "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetBudgetAvailableForAreaWithoutAccounts(){

        $today = getdate();
        $this->saveAreaForSearch();

        $json = $this->controller->getBudgetAvailableByAccounts($this->areaFields['id_area'], $today['year']);

        //Eliminar los datos antes de los asserts
        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();

        $this->assertNotNull($json);

        $data = json_decode($json->getContent(),true); //Decodificar el json

        $this->assertEquals(1,sizeof($data));

        $this->assertArrayHasKey('budget_year', $data[0]);
        $this->assertArrayHasKey('total_budget_initial', $data[0]);
        $this->assertArrayHasKey('total_budget_available', $data[0]);
        $this->assertEquals(null, $data[0]['budget_year']);
        $this->assertEquals(null, $data[0]['total_budget_initial']);
        $this->assertEquals(null, $data[0]['total_budget_available']);

        $this->assertArrayNotHasKey('id_area', $data[0]);
        $this->assertArrayNotHasKey('account_name', $data[0]);
        $this->assertArrayNotHasKey('account_code', $data[0]);
        $this->assertArrayNotHasKey('description', $data[0]);


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testGetBudgetAvailableForAreaWithoutAccounts "."\033[32m OK \033[0m ". "\n");

    }

    public function testDestroyArea(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->saveAreaForSearch();

        $budget = new AreasBudget($this->budgetFields);
        $budget->save();

        $budget2 = new AccountBudget($this->accountbudgetFields);
        $budget2->save();

        $this->controller->destroy($this->request, $this->budgetFields['id_area']);

        $this->dontSeeInDatabase('areas_budget', $this->budgetFields);
        $this->dontSeeInDatabase('areas_budget', $this->budgetFields2);

        $this->dontSeeInDatabase('areas', $this->areaFields);

        //Eliminar el último dato
        $user = User::find($this->userFields['id_user']);
        $user->delete();

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testDestroyArea "."\033[32m OK \033[0m ". "\n");

    }

    public function testStoreAreaWithoutBudget(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $user = new User($this->userFields);
        $user->save();

        //Setear campos en el request
        $this->request['id_area'] = 0;
        $this->request["short_name"] = $this->areaFields['short_name'];
        $this->request["long_name"] = $this->areaFields['long_name'];
        $this->request["manager_name"] = $this->areaFields['manager_name'];
        $this->request["manager_position"] = $this->areaFields['manager_position'];
        $this->request['id_user'] = $this->userFields['id_user'];
        $this->request['budgets'] = json_encode(array());

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->controller->store($this->request);


        unset($this->areaFields['id_area']);

        $this->seeInDatabase('areas', $this->areaFields);
        $this->see('Listado de Áreas');

        //Eliminar los datos
        $area = Area::findBy('short_name',$this->areaFields['short_name']);
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testStoreAreaWithoutBudget "."\033[32m OK \033[0m ". "\n");

    }

    public function addAreaWithAccount(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $user = new User($this->userFields);
        $user->save();

        //Setear campos en el request
        $this->request['id_area'] = 0;
        $this->request["short_name"] = $this->areaFields['short_name'];
        $this->request["long_name"] = $this->areaFields['long_name'];
        $this->request["manager_name"] = $this->areaFields['manager_name'];
        $this->request["manager_position"] = $this->areaFields['manager_position'];
        $this->request['id_user'] = $this->userFields['id_user'];

        $form['year'] = $this->accountbudgetFields['budget_year'];
        $form['code'] = $this->accountbudgetFields['account_code'];
        $form['name'] = $this->accountbudgetFields['account_name'];
        $form['desc'] = $this->accountbudgetFields['description'];
        $form['amount'] = number_format($this->accountbudgetFields['total_budget_initial'],0,',','.');

        $detail = array();
        array_push($detail, $form);

        $this->request['budgets'] = json_encode($detail);

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->controller->store($this->request);


    }

    public function testStoreAreaWithAccountBudget(){

        $this->addAreaWithAccount();

        unset($this->areaFields['id_area']);
        unset($this->accountbudgetFields['id_area']);

        $this->seeInDatabase('areas', $this->areaFields);
        $this->seeInDatabase('account_budget', $this->accountbudgetFields);
        $this->see('Listado de Áreas');

        //Eliminar los datos
        $area = Area::findBy('short_name',$this->areaFields['short_name']);
        AccountBudget::deleteBudgets($area->id_area);
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testStoreAreaWithAccountBudget "."\033[32m OK \033[0m ". "\n");

    }

    public function testUpdateAreaWithoutAccountBudget(){

        $this->saveAreaForSearch();
        $area = Area::find($this->areaFields['id_area']);

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $random = rand(0,9);
        $newShortName = "TS" . $random;

        //Setear campos en el request
        $this->request['id_area'] = $this->areaFields['id_area'];
        $this->request["short_name"] = $newShortName;
        $this->request["long_name"] = $this->areaFields['long_name'];
        $this->request["manager_name"] = $this->areaFields['manager_name'];
        $this->request["manager_position"] = $this->areaFields['manager_position'];
        $this->request['id_user'] = $this->userFields['id_user'];

        $this->request['budgets'] = json_encode(array());

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->controller->update($this->request);

        unset($this->areaFields['id_area']);

        $this->dontSeeInDatabase('areas', $this->areaFields);
        $this->areaFields['short_name'] = $newShortName;
        $this->seeInDatabase('areas', $this->areaFields);
        $this->see('Listado de Áreas');

        //Eliminar los datos
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testUpdateAreaWithoutAccountBudget "."\033[32m OK \033[0m ". "\n");

    }

    public function testUpdateAreaToAddAccountBudget(){

        $this->saveAreaForSearch();
        $area = Area::find($this->areaFields['id_area']);

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $random = rand(0,9);
        $newShortName = "TS" . $random;

        //Setear campos en el request
        $this->request['id_area'] = $this->areaFields['id_area'];
        $this->request["short_name"] = $newShortName;
        $this->request["long_name"] = $this->areaFields['long_name'];
        $this->request["manager_name"] = $this->areaFields['manager_name'];
        $this->request["manager_position"] = $this->areaFields['manager_position'];
        $this->request['id_user'] = $this->userFields['id_user'];

        $form['year'] = $this->accountbudgetFields['budget_year'];
        $form['code'] = $this->accountbudgetFields['account_code'];
        $form['name'] = $this->accountbudgetFields['account_name'];
        $form['desc'] = $this->accountbudgetFields['description'];
        $form['amount'] = number_format($this->accountbudgetFields['total_budget_initial'],0,',','.');

        $detail = array();
        array_push($detail, $form);

        $this->request['budgets'] = json_encode($detail);

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->controller->update($this->request);

        $this->dontSeeInDatabase('areas', $this->areaFields);
        $this->areaFields['short_name'] = $newShortName;
        $this->seeInDatabase('areas', $this->areaFields);
        $this->seeInDatabase('account_budget', $this->accountbudgetFields);
        $this->see('Listado de Áreas');

        //Eliminar los datos
        AccountBudget::deleteBudgets($area->id_area);
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testUpdateAreaToAddAccountBudget "."\033[32m OK \033[0m ". "\n");

    }

    public function testUpdateAreaToCloseBudgetWithAccount(){

        $this->saveAreaForSearch();
        $area = Area::find($this->areaFields['id_area']);

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $random = rand(0,9);
        $newShortName = "TS" . $random;

        //Setear campos en el request
        $this->request['id_area'] = $this->areaFields['id_area'];
        $this->request["short_name"] = $newShortName;
        $this->request["long_name"] = $this->areaFields['long_name'];
        $this->request["manager_name"] = $this->areaFields['manager_name'];
        $this->request["manager_position"] = $this->areaFields['manager_position'];
        $this->request['id_user'] = $this->userFields['id_user'];
        $this->request['budget_closed'] = "on"; //Fijar presupuesto de área

        $form['year'] = $this->accountbudgetFields['budget_year'];
        $form['code'] = $this->accountbudgetFields['account_code'];
        $form['name'] = $this->accountbudgetFields['account_name'];
        $form['desc'] = $this->accountbudgetFields['description'];
        $form['amount'] = number_format($this->accountbudgetFields['total_budget_initial'],0,',','.');

        $detail = array();
        array_push($detail, $form);

        $this->request['budgets'] = json_encode($detail);

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->controller->update($this->request);

        $this->dontSeeInDatabase('areas', $this->areaFields);
        $this->areaFields['short_name'] = $newShortName;
        $this->areaFields['budget_closed'] = $this->areaClosedFields['budget_closed'];
        $this->seeInDatabase('areas', $this->areaFields);
        $this->seeInDatabase('account_budget', $this->accountbudgetFields);
        $this->see('Listado de Áreas');

        //Visualizar el registro de cierre
        $this->seeInDatabase('areas_budget', ['id_area'  => $this->areaFields['id_area'],
                                                'budget_year' => $this->accountbudgetFields['budget_year'],
                                                'total_budget_initial' => $this->accountbudgetFields['total_budget_initial'],
                                                'total_budget_available' => $this->accountbudgetFields['total_budget_initial'],]);

        //Eliminar los datos
        AreasBudget::deleteBudgets($area->id_area);
        AccountBudget::deleteBudgets($area->id_area);
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testUpdateAreaToCloseBudgetWithAccount "."\033[32m OK \033[0m ". "\n");
    }

    public function addAreaWithAccounts($area, $newName){

        //Setear campos en el request
        $this->request['id_area'] = $area->id_area;
        $this->request["short_name"] = $newName;
        $this->request["long_name"] = $this->areaFields['long_name'];
        $this->request["manager_name"] = $this->areaFields['manager_name'];
        $this->request["manager_position"] = $this->areaFields['manager_position'];
        $this->request['id_user'] = $this->userFields['id_user'];
        $this->request['budget_closed'] = "on"; //Fijar presupuesto de área

        $detail = array();
        $form['year'] = $this->accountbudgetFields['budget_year'];
        $form['code'] = $this->accountbudgetFields['account_code'];
        $form['name'] = $this->accountbudgetFields['account_name'];
        $form['desc'] = $this->accountbudgetFields['description'];
        $form['amount'] = number_format($this->accountbudgetFields['total_budget_initial'],0,',','.');
        array_push($detail, $form);

        $form['year'] = $this->accountbudgetFields2['budget_year'];
        $form['code'] = $this->accountbudgetFields2['account_code'];
        $form['name'] = $this->accountbudgetFields2['account_name'];
        $form['desc'] = $this->accountbudgetFields2['description'];
        $form['amount'] = number_format($this->accountbudgetFields2['total_budget_initial'],0,',','.');
        array_push($detail, $form);

        $this->request['budgets'] = json_encode($detail);

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->controller->update($this->request);

    }

    public function testUpdateAreaToCloseBudgetWithAccounts(){

        $this->saveAreaForSearch();
        $area = Area::find($this->areaFields['id_area']);

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $random = rand(0,9);
        $newShortName = "TS" . $random;

        $this->addAreaWithAccounts($area, $newShortName);

        $this->dontSeeInDatabase('areas', $this->areaFields);
        $this->areaFields['short_name'] = $newShortName;
        $this->areaFields['budget_closed'] = $this->areaClosedFields['budget_closed'];
        $this->seeInDatabase('areas', $this->areaFields);
        $this->seeInDatabase('account_budget', $this->accountbudgetFields);
        $this->seeInDatabase('account_budget', $this->accountbudgetFields2);
        $this->see('Listado de Áreas');

        //Visualizar el registro de cierre
        $montoIni = $this->accountbudgetFields['total_budget_initial'] + $this->accountbudgetFields2['total_budget_initial'];
        $montoDisp = $this->accountbudgetFields['total_budget_available'] + $this->accountbudgetFields2['total_budget_available'];

        $this->seeInDatabase('areas_budget', ['id_area'  => $this->areaFields['id_area'],
                                                'budget_year' => $this->accountbudgetFields['budget_year'],
                                                'total_budget_initial' => number_format($montoIni,2,'.',''),
                                                'total_budget_available' => number_format($montoDisp,2,'.','')]);

        //Eliminar los datos
        AreasBudget::deleteBudgets($area->id_area);
        AccountBudget::deleteBudgets($area->id_area);
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testUpdateAreaToCloseBudgetWithAccounts "."\033[32m OK \033[0m ". "\n");
    }

    public function testUpdateAreaToCloseBudgetWithoutAccount(){

        $this->saveAreaForSearch();
        $area = Area::find($this->areaFields['id_area']);

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $random = rand(0,9);
        $newShortName = "TS" . $random;

        //Setear campos en el request
        $this->request['id_area'] = $this->areaFields['id_area'];
        $this->request["short_name"] = $newShortName;
        $this->request["long_name"] = $this->areaFields['long_name'];
        $this->request["manager_name"] = $this->areaFields['manager_name'];
        $this->request["manager_position"] = $this->areaFields['manager_position'];
        $this->request['id_user'] = $this->userFields['id_user'];
        $this->request['budget_closed'] = "on"; //Fijar presupuesto de área


        $detail = array();
        $this->request['budgets'] = json_encode($detail);

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->controller->update($this->request);

        $this->dontSeeInDatabase('areas', $this->areaFields);
        $this->areaFields['short_name'] = $newShortName;
        $this->areaFields['budget_closed'] = $this->areaClosedFields['budget_closed'];
        $this->seeInDatabase('areas', $this->areaFields);
        $this->see('Listado de Áreas');

        //No visualizar el registro de cierre
        $this->dontSeeInDatabase('areas_budget', ['id_area'  => $this->areaFields['id_area'],
                                                    'budget_year' => $this->accountbudgetFields['budget_year'],
                                                    'total_budget_initial' => $this->accountbudgetFields['total_budget_initial'],
                                                    'total_budget_available' => $this->accountbudgetFields['total_budget_initial']]);

        $this->seeInDatabase('areas_budget', ['id_area'  => $this->areaFields['id_area'],
                                                'budget_year' => $this->accountbudgetFields['budget_year'],
                                                'total_budget_initial' => '0.00',
                                                'total_budget_available' => '0.00']);

        //Eliminar los datos
        AreasBudget::deleteBudgets($area->id_area);
        AccountBudget::deleteBudgets($area->id_area);
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testUpdateAreaToCloseBudgetWithoutAccount "."\033[32m OK \033[0m ". "\n");
    }

    public function testIncreaseAccountAmountInOpenAreaCorrectly(){

        $oldAccount = new AccountBudget($this->accountbudgetFields);
        $newAmount = floatval($this->accountbudgetFields['total_budget_initial']) + 10000;
        $isOpen = $this->areaFields['budget_closed']; //No está cerrada

        $result = $this->controller->getNewAmounts($isOpen,$oldAccount,$newAmount, $newAmount);

        $this->assertInstanceOf(AccountBudget::class, $result);
        $this->assertEquals($newAmount, $result->total_budget_initial);
        $this->assertEquals(floatval($this->accountbudgetFields['total_budget_available']) + 10000, $result->total_budget_available);


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testGetBiggerAccountAmountInOpenAreaCorrectly "."\033[32m OK \033[0m ". "\n");

    }

    public function testIncreaseAccountAmountInClosedAreaCorrectly(){

        $this->saveAreaForSearch();
        $areaTotalAmount = new AreasBudget($this->budgetFields);

        $oldAccount = new AccountBudget($this->accountbudgetFields);
        $newAmount = floatval($this->accountbudgetFields['total_budget_initial']) + 10000;

        //El presupuesto del área estaba seteado al máximo posible a ser asignado
        $areaTotalAmount->total_budget_initial = $newAmount;
        $areaTotalAmount->total_budget_available = $newAmount;
        $this->assertLessThanOrEqual( $areaTotalAmount->total_budget_initial, $newAmount);

        $isOpen = $this->areaClosedFields['budget_closed']; //Está cerrada

        $areaTotalAmount->save();

        $result = $this->controller->getNewAmounts($isOpen,$oldAccount,$newAmount, $newAmount);

        //Eliminar los datos antes de los asserts
        AreasBudget::deleteBudgets($this->areaFields['id_area']);

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $this->assertInstanceOf(AccountBudget::class, $result);
        $this->assertEquals($newAmount, $result->total_budget_initial);
        $this->assertEquals(floatval($this->accountbudgetFields['total_budget_available']) + 10000, $result->total_budget_available);


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testIncreaseAccountAmountInClosedAreaCorrectly "."\033[32m OK \033[0m ". "\n");

    }

    public function testIncreaseAccountAmountInClosedAreaIncorrectly(){

        $this->saveAreaForSearch();
        $areaTotalAmount = new AreasBudget($this->budgetFields);

        $oldAccount = new AccountBudget($this->accountbudgetFields);
        $newAmount = floatval($this->accountbudgetFields['total_budget_initial']) + 10000;

        //El presupuesto del área estaba seteado a un monto menor del nuevo presupuesto que se quiere agregar
        $this->assertGreaterThan($areaTotalAmount->total_budget_initial, $newAmount);
        $isOpen = $this->areaClosedFields['budget_closed']; //Está cerrada

        $areaTotalAmount->save();
        $result = null;
        try {
            $this->controller->getNewAmounts($isOpen, $oldAccount, $newAmount, $newAmount);
        }catch(\Exception $e){
            //Eliminar los datos antes de los asserts
            AreasBudget::deleteBudgets($this->areaFields['id_area']);

            $area = Area::find($this->areaFields['id_area']);
            $area->delete();

            $user = User::find($this->userFields['id_user']);
            $user->delete();

            $this->assertEquals("El ajuste al monto total de la cuenta no procede pues excede el presupuesto definido para el área", $e->getMessage());

            fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testIncreaseAccountAmountInClosedAreaCorrectly "."\033[32m OK \033[0m ". "\n");
            return;
        }

        $this->fail();
    }

    public function testDecreaseAccountAmountInAreaCorrectly(){

        $oldAccount = new AccountBudget($this->accountbudgetFields);
        $newAmount = floatval($this->accountbudgetFields['total_budget_initial']) - 10000;

        //El presupuesto disponible de la cuenta permite el descuento
        $this->assertGreaterThan( (floatval($oldAccount->total_budget_initial) - $newAmount) , $oldAccount->total_budget_available);

        $isOpen = $this->areaClosedFields['budget_closed']; //Está cerrada


        $result = $this->controller->getNewAmounts($isOpen,$oldAccount,$newAmount, $newAmount);

        $this->assertInstanceOf(AccountBudget::class, $result);
        $this->assertEquals($newAmount, $result->total_budget_initial);
        $this->assertEquals(floatval($this->accountbudgetFields['total_budget_available']) - 10000, $result->total_budget_available);


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testDecreaseAccountAmountInAreaCorrectly "."\033[32m OK \033[0m ". "\n");

    }

    public function testDecreaseAccountAmountInAreaIncorrectly(){

        $oldAccount = new AccountBudget($this->accountbudgetFields);
        $newAmount = floatval($this->accountbudgetFields['total_budget_initial']) - 10000;

        //El presupuesto disponible es menor que el total a descontar
        $oldAccount->total_budget_available = 500;
        $this->assertGreaterThan($oldAccount->total_budget_available, (floatval($oldAccount->total_budget_initial) - $newAmount));

        $isOpen = $this->areaClosedFields['budget_closed']; //Está cerrada
        $result = null;
        try {
            $this->controller->getNewAmounts($isOpen, $oldAccount, $newAmount, $newAmount);

        }catch(\Exception $e){

            $this->assertEquals("El ajuste al monto de la cuenta no procede pues ya se consumió más de lo que se desea debitar", $e->getMessage());

            fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testDecreaseAccountAmountInAreaIncorrectly "."\033[32m OK \033[0m ". "\n");
            return;
        }

        $this->fail();
    }

    public function testSetBudgetForAreaWithAccounts(){

        $this->saveAreaForSearch();

        $budget = new AccountBudget($this->accountbudgetFields);
        $budget->save();

        $budget2 = new AccountBudget($this->accountbudgetFields2);
        $budget2->save();

        $this->controller->setBudgetForArea($this->areaFields['id_area']);

        $montoIni = $this->accountbudgetFields['total_budget_initial'] + $this->accountbudgetFields2['total_budget_initial'];
        $montoDisp = $this->accountbudgetFields['total_budget_available'] + $this->accountbudgetFields2['total_budget_available'];

        $this->seeInDatabase('areas_budget', ['id_area' => $this->areaFields['id_area'], 'budget_year' => $this->accountbudgetFields['budget_year'],
                                              'total_budget_initial' => $montoIni, 'total_budget_available' => $montoDisp]);

        //Eliminar los datos antes de los asserts
        AreasBudget::deleteBudgets($this->areaFields['id_area']);
        AccountBudget::deleteBudgets($this->areaFields['id_area']);

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testSetBudgetForAreaWithAccounts "."\033[32m OK \033[0m ". "\n");

    }

    public function testSetBudgetForAreaWithoutAccounts(){

        $this->saveAreaForSearch();

        $this->controller->setBudgetForArea($this->areaFields['id_area']);

        $monto = 0;

        $this->seeInDatabase('areas_budget', ['id_area' => $this->areaFields['id_area'], 'budget_year' => $this->accountbudgetFields['budget_year'],
            'total_budget_initial' => $monto, 'total_budget_available' => $monto]);

        //Eliminar los datos antes de los asserts
        AreasBudget::deleteBudgets($this->areaFields['id_area']);

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testSetBudgetForAreaWithoutAccounts "."\033[32m OK \033[0m ". "\n");

    }

    public function testUpdateBudgetForClosedArea(){

        $this->saveAreaForSearch(true);

        $budget = new AreasBudget($this->budgetFields);
        $budget->save();

        $budget = new AccountBudget($this->accountbudgetFields);
        $budget->save();

        $this->assertNotEquals($this->budgetFields['total_budget_initial'], $this->accountbudgetFields['total_budget_available']);
        $this->assertNotEquals($this->budgetFields['total_budget_available'], $this->accountbudgetFields['total_budget_available']);

        $this->controller->updateBudgetForArea($this->areaClosedFields['id_area']);

        //Solo se debe actualizar el monto del presupuesto disponible (a la suma de lo existente en las cuentas)
        $this->seeInDatabase('areas_budget', ['id_area' => $this->areaClosedFields['id_area'], 'budget_year' => $this->accountbudgetFields['budget_year'],
            'total_budget_initial' => $this->budgetFields['total_budget_initial'], 'total_budget_available' => $this->accountbudgetFields['total_budget_available']]);

        //Eliminar los datos antes de los asserts
        AreasBudget::deleteBudgets($this->areaFields['id_area']);
        AccountBudget::deleteBudgets($this->areaFields['id_area']);

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testUpdateBudgetForClosedArea "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetBudgetAvailableByAccount(){

        $this->saveAreaForSearch(true);

        $budget = new AccountBudget($this->accountbudgetFields);
        $budget->save();

        $json = $this->controller->getBudgetAvailableByAccount($this->budgetFields['id_area'], $this->budgetFields['budget_year'], $this->accountbudgetFields['account_code']);

        //Eliminar los datos antes de los asserts
        AccountBudget::deleteBudgets($this->budgetFields['id_area']);

        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();

        $this->assertNotNull($json);


        $this->assertContains($this->accountbudgetFields['budget_year'],$json->getContent());
        $this->assertContains($this->accountbudgetFields['total_budget_initial'],$json->getContent());
        $this->assertContains($this->accountbudgetFields['account_code'],$json->getContent());
        $this->assertContains($this->accountbudgetFields['account_name'],$json->getContent());
        $this->assertContains($this->accountbudgetFields['description'],$json->getContent());

        $data = json_decode($json->getContent(),true); //Decodificar el json

        $this->assertArrayHasKey('id_area', $data);
        $this->assertArrayHasKey('budget_year', $data);
        $this->assertArrayHasKey('total_budget_initial', $data);
        $this->assertArrayHasKey('total_budget_available', $data);

        $this->assertArrayHasKey('account_name', $data);
        $this->assertArrayHasKey('account_code', $data);
        $this->assertArrayHasKey('description', $data);

        $this->assertEquals(1,sizeof($json->getContent()));


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testGetBudgetAvailableByAccount "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetInformationAccount(){

        $this->saveAreaForSearch(true);

        $budget = new AccountBudget($this->accountbudgetFields);
        $budget->save();

        $this->request->year = $this->accountbudgetFields['budget_year'];
        $this->request->id_area = $this->accountbudgetFields['id_area'];
        $this->request->account_code = $this->accountbudgetFields['account_code'];


        $result = $this->controller->getInformationAccount($this->request);

        //Eliminar los datos antes de los asserts
        AccountBudget::deleteBudgets($this->budgetFields['id_area']);

        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();

        $this->assertNotNull($result);

        $this->assertInstanceOf(AccountBudget::class,$result);

        $this->assertContains($this->accountbudgetFields['budget_year'],$result['attributes']);
        $this->assertContains($this->accountbudgetFields['total_budget_initial'],$result['attributes']);
        $this->assertContains($this->accountbudgetFields['total_budget_available'],$result['attributes']);
        $this->assertContains($this->accountbudgetFields['account_code'],$result['attributes']);
        $this->assertContains($this->accountbudgetFields['account_name'],$result['attributes']);
        $this->assertContains($this->accountbudgetFields['description'],$result['attributes']);
        $this->assertContains($this->accountbudgetFields['id_area'],$result['attributes']);

        $this->assertArrayHasKey('id_area', $result['attributes']);
        $this->assertArrayHasKey('budget_year', $result['attributes']);
        $this->assertArrayHasKey('total_budget_initial', $result['attributes']);
        $this->assertArrayHasKey('total_budget_available', $result['attributes']);

        $this->assertArrayHasKey('account_name', $result['attributes']);
        $this->assertArrayHasKey('account_code', $result['attributes']);
        $this->assertArrayHasKey('description', $result['attributes']);

        $this->assertEquals(1,sizeof($result));

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testGetInformationAccount "."\033[32m OK \033[0m ". "\n");

    }

    public function testGetAllAccountsArea(){

        $this->saveAreaForSearch(true);

        $budget = new AccountBudget($this->accountbudgetFields);
        $budget->save();

        $budget = new AccountBudget($this->accountbudgetFields2);
        $budget->save();

        $this->request->id_area = $this->accountbudgetFields['id_area'];

        $this->assertEquals($this->accountbudgetFields['id_area'], $this->accountbudgetFields2['id_area']);

        $json = $this->controller->getAccountsArea($this->request);

        //Eliminar los datos antes de los asserts
        AccountBudget::deleteBudgets($this->budgetFields['id_area']);

        $user = User::find($this->userFields['id_user']);
        $user->delete();

        $area = Area::find($this->areaFields['id_area']);
        $area->delete();

        $this->assertNotNull($json);

        $this->assertContains($this->accountbudgetFields['account_code'],$json->getContent());
        $this->assertContains($this->accountbudgetFields2['account_code'],$json->getContent());

        $this->assertEquals(2,sizeof($json->getData()));

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testGetAllAccountsArea "."\033[32m OK \033[0m ". "\n");

    }

    public function testUpdateOpenAreaToEditBudget(){

        $this->saveAreaForSearch();
        $area = Area::find($this->areaFields['id_area']);

        $budget = new AccountBudget($this->accountbudgetFields);
        $budget->save();

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $random = rand(0,9);
        $newShortName = "TS" . $random;

        //Setear campos en el request
        $this->request['id_area'] = $this->areaFields['id_area'];
        $this->request["short_name"] = $newShortName;
        $this->request["long_name"] = $this->areaFields['long_name'];
        $this->request["manager_name"] = $this->areaFields['manager_name'];
        $this->request["manager_position"] = $this->areaFields['manager_position'];
        $this->request['id_user'] = $this->userFields['id_user'];

        $newAmount = '5000.00';
        $newNameAccount = "Cuenta editada";

        $form['year'] = $this->accountbudgetFields['budget_year'];
        $form['code'] = $this->accountbudgetFields['account_code'];
        $form['name'] = $newNameAccount;
        $form['desc'] = $this->accountbudgetFields['description'];
        $form['amount'] = number_format($newAmount,0,',','.');

        $detail = array();
        array_push($detail, $form);

        $this->request['budgets'] = json_encode($detail);

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->controller->update($this->request);

        $this->dontSeeInDatabase('areas', $this->areaFields);
        $this->areaFields['short_name'] = $newShortName;
        $this->seeInDatabase('areas', $this->areaFields);
        $this->dontSeeInDatabase('account_budget', $this->accountbudgetFields);
        $this->accountbudgetFields['account_name'] = $newNameAccount;
        $this->accountbudgetFields['total_budget_initial'] = $newAmount;
        $this->accountbudgetFields['total_budget_available'] = $newAmount;
        $this->seeInDatabase('account_budget', $this->accountbudgetFields);
        $this->see('Listado de Áreas');

        //Eliminar los datos
        AccountBudget::deleteBudgets($area->id_area);
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testUpdateOpenAreaToEditBudget "."\033[32m OK \033[0m ". "\n");

    }

    public function decreaseAccountBudget($area, $amount){

        //Queremos decrementar el presupuesto inicial de la cuenta (teniendo el presupuesto cerrado para el área)
        $monto = floatval($this->accountbudgetFields['total_budget_initial']) - $amount;
        $this->assertLessThan($this->accountbudgetFields['total_budget_available'], $monto);

        //Setear campos en el request
        $this->request['id_area'] = $area->id_area;
        $this->request["short_name"] = $this->areaFields['short_name'];
        $this->request["long_name"] = $this->areaFields['long_name'];
        $this->request["manager_name"] = $this->areaFields['manager_name'];
        $this->request["manager_position"] = $this->areaFields['manager_position'];
        $this->request['id_user'] = $this->userFields['id_user'];
        $this->request['budget_closed'] = $this->areaClosedFields['budget_closed']; //Estaba cerrada


        $form['year'] = $this->accountbudgetFields['budget_year'];
        $form['code'] = $this->accountbudgetFields['account_code'];
        $form['name'] = $this->accountbudgetFields['account_name'];
        $form['desc'] = $this->accountbudgetFields['description'];
        $form['amount'] = number_format($monto,0,',','.');

        $detail = array();
        array_push($detail, $form);

        $this->request['budgets'] = json_encode($detail);

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->controller->update($this->request);
    }

    public function testUpdateClosedAreaToDecreaseBudgetCorrectly(){

        $this->request['budget_closed'] = "on"; //Cerrar el presupuesto del área después de crearla
        $this->addAreaWithAccount();

        /** @var Area $area */
        $area = Area::findBy('short_name',$this->areaFields['short_name']);

        unset($this->areaFields['id_area']);
        unset($this->accountbudgetFields['id_area']);
        $this->areaFields['budget_closed'] =$this->areaClosedFields['budget_closed'];

        //Se cerró el presupuesto
        $this->seeInDatabase('areas', $this->areaFields);
        $this->seeInDatabase('account_budget', $this->accountbudgetFields);
        $this->seeInDatabase('areas_budget', ['id_area' => $area->id_area, 'budget_year' => $this->accountbudgetFields['budget_year'],
            'total_budget_initial' => $this->accountbudgetFields['total_budget_initial'], 'total_budget_available' => $this->accountbudgetFields['total_budget_available']]);

        $budget = AreasBudget::getBudget($area->id_area, $this->accountbudgetFields['budget_year']);

        $this->decreaseAccountBudget($area, 10000);

        $this->seeInDatabase('areas', $this->areaFields);
        $this->dontSeeInDatabase('account_budget', $this->accountbudgetFields);

        //En BD el presupuesto de la cuenta fue ajustado
        $this->accountbudgetFields['total_budget_available'] = floatval($this->accountbudgetFields['total_budget_available']) - 10000;
        $this->accountbudgetFields['total_budget_initial'] = floatval($this->accountbudgetFields['total_budget_initial']) - 10000;
        $this->seeInDatabase('account_budget', $this->accountbudgetFields);

        //A nivel de área sólo se ajustó el presupuesto disponible
        $this->seeInDatabase('areas_budget', ['id_area' => $area->id_area, 'budget_year' => $this->accountbudgetFields['budget_year'],
            'total_budget_initial' => $budget->total_budget_initial, 'total_budget_available' => $this->accountbudgetFields['total_budget_available']]);

        //Eliminar los datos
        $area = Area::findBy('short_name',$this->areaFields['short_name']);
        AccountBudget::deleteBudgets($area->id_area);
        AreasBudget::deleteBudgets($area->id_area);
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testUpdateClosedAreaToDecreaseBudgetCorrectly "."\033[32m OK \033[0m ". "\n");

    }

    public function testUpdateClosedAreaToDecreaseBudgetToCeroCorrectly(){

        $this->request['budget_closed'] = "on"; //Cerrar el presupuesto del área después de crearla
        $this->addAreaWithAccount();

        /** @var Area $area */
        $area = Area::findBy('short_name',$this->areaFields['short_name']);

        unset($this->areaFields['id_area']);
        unset($this->accountbudgetFields['id_area']);
        $this->areaFields['budget_closed'] =$this->areaClosedFields['budget_closed'];

        //Se cerró el presupuesto
        $this->seeInDatabase('areas', $this->areaFields);
        $this->seeInDatabase('account_budget', $this->accountbudgetFields);
        $this->seeInDatabase('areas_budget', ['id_area' => $area->id_area, 'budget_year' => $this->accountbudgetFields['budget_year'],
            'total_budget_initial' => $this->accountbudgetFields['total_budget_initial'], 'total_budget_available' => $this->accountbudgetFields['total_budget_available']]);

        $budget = AreasBudget::getBudget($area->id_area, $this->accountbudgetFields['budget_year']);

        $montoTotal = floatval($this->accountbudgetFields['total_budget_initial']);

        $this->decreaseAccountBudget($area, $montoTotal);

        $this->seeInDatabase('areas', $this->areaFields);
        $this->dontSeeInDatabase('account_budget', $this->accountbudgetFields);

        //En BD el presupuesto de la cuenta fue ajustado
        $this->accountbudgetFields['total_budget_available'] = floatval($this->accountbudgetFields['total_budget_available']) - $montoTotal;
        $this->accountbudgetFields['total_budget_initial'] = floatval($this->accountbudgetFields['total_budget_initial']) - $montoTotal;
        $this->seeInDatabase('account_budget', $this->accountbudgetFields);

        //A nivel de área sólo se ajustó el presupuesto disponible
        $this->seeInDatabase('areas_budget', ['id_area' => $area->id_area, 'budget_year' => $this->accountbudgetFields['budget_year'],
            'total_budget_initial' => $budget->total_budget_initial, 'total_budget_available' => $this->accountbudgetFields['total_budget_available']]);

        //Eliminar los datos
        $area = Area::findBy('short_name',$this->areaFields['short_name']);
        AccountBudget::deleteBudgets($area->id_area);
        AreasBudget::deleteBudgets($area->id_area);
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();


        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testUpdateClosedAreaToDecreaseBudgetToCeroCorrectly "."\033[32m OK \033[0m ". "\n");

    }


    public function testUpdateClosedAreaToDecreaseBudgetIncorrectly(){

        $this->request['budget_closed'] = "on"; //Cerrar el presupuesto del área después de crearla
        $this->addAreaWithAccount();

        /** @var Area $area */
        $area = Area::findBy('short_name',$this->areaFields['short_name']);

        unset($this->areaFields['id_area']);
        unset($this->accountbudgetFields['id_area']);
        $this->areaFields['budget_closed'] =$this->areaClosedFields['budget_closed'];

        //Se cerró el presupuesto
        $this->seeInDatabase('areas', $this->areaFields);
        $this->seeInDatabase('account_budget', $this->accountbudgetFields);
        $this->seeInDatabase('areas_budget', ['id_area' => $area->id_area, 'budget_year' => $this->accountbudgetFields['budget_year'],
            'total_budget_initial' => $this->accountbudgetFields['total_budget_initial'], 'total_budget_available' => $this->accountbudgetFields['total_budget_available']]);

        $budget = AreasBudget::getBudget($area->id_area, $this->accountbudgetFields['budget_year']);

        //Hacemos el presupuesto disponible en la cuenta menor del monto que se desea debitar
        AccountBudget::where('id_area', $area->id_area)
            ->where('budget_year', $this->accountbudgetFields['budget_year'])
            ->where('account_code', $this->accountbudgetFields['account_code'])->update(array('total_budget_available' =>  5000 ));

        //Queremos decrementar el presupuesto inicial de la cuenta (teniendo el presupuesto cerrado para el área)
        $menorMonto = floatval($this->accountbudgetFields['total_budget_initial']) - 10000;

        //Setear campos en el request
        $this->request['id_area'] = $area->id_area;
        $this->request["short_name"] = $this->areaFields['short_name'];
        $this->request["long_name"] = $this->areaFields['long_name'];
        $this->request["manager_name"] = $this->areaFields['manager_name'];
        $this->request["manager_position"] = $this->areaFields['manager_position'];
        $this->request['id_user'] = $this->userFields['id_user'];
        $this->request['budget_closed'] = $this->areaClosedFields['budget_closed']; //Estaba cerrada


        $form['year'] = $this->accountbudgetFields['budget_year'];
        $form['code'] = $this->accountbudgetFields['account_code'];
        $form['name'] = $this->accountbudgetFields['account_name'];
        $form['desc'] = $this->accountbudgetFields['description'];
        $form['amount'] = number_format($menorMonto,0,',','.');

        $detail = array();
        array_push($detail, $form);

        $this->request['budgets'] = json_encode($detail);

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->controller->update($this->request);

        $this->seeInDatabase('areas', $this->areaFields);
        //En esta prueba el presupuesto de la cuenta no se disminuyó mas
        $this->accountbudgetFields['total_budget_available'] = 5000;
        $this->seeInDatabase('account_budget', $this->accountbudgetFields);

        //A nivel de área no se ajustó nada
        $this->seeInDatabase('areas_budget', ['id_area' => $area->id_area, 'budget_year' => $this->accountbudgetFields['budget_year'],
            'total_budget_initial' => $budget->total_budget_initial, 'total_budget_available' => $budget->total_budget_available]);

        //Eliminar los datos
        $area = Area::findBy('short_name',$this->areaFields['short_name']);
        AccountBudget::deleteBudgets($area->id_area);
        AreasBudget::deleteBudgets($area->id_area);
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testUpdateClosedAreaToDecreaseBudgetIncorrectly "."\033[32m OK \033[0m ". "\n");

    }

    public function testUpdateClosedAreaToIncreaseBudgetIncorrectly(){

        $this->request['budget_closed'] = "on"; //Cerrar el presupuesto del área después de crearla
        $this->addAreaWithAccount();

        /** @var Area $area */
        $area = Area::findBy('short_name',$this->areaFields['short_name']);

        unset($this->areaFields['id_area']);
        unset($this->accountbudgetFields['id_area']);
        $this->areaFields['budget_closed'] =$this->areaClosedFields['budget_closed'];

        //Se cerró el presupuesto
        $this->seeInDatabase('areas', $this->areaFields);
        $this->seeInDatabase('account_budget', $this->accountbudgetFields);
        $this->seeInDatabase('areas_budget', ['id_area' => $area->id_area, 'budget_year' => $this->accountbudgetFields['budget_year'],
            'total_budget_initial' => $this->accountbudgetFields['total_budget_initial'], 'total_budget_available' => $this->accountbudgetFields['total_budget_available']]);

        $budget = AreasBudget::getBudget($area->id_area, $this->accountbudgetFields['budget_year']);



        //Queremos incrementar el presupuesto inicial de la cuenta (teniendo el presupuesto cerrado para el área)
        $mayorMonto = floatval($this->accountbudgetFields['total_budget_initial']) + 10000;

        //Setear campos en el request
        $this->request['id_area'] = $area->id_area;
        $this->request["short_name"] = $this->areaFields['short_name'];
        $this->request["long_name"] = $this->areaFields['long_name'];
        $this->request["manager_name"] = $this->areaFields['manager_name'];
        $this->request["manager_position"] = $this->areaFields['manager_position'];
        $this->request['id_user'] = $this->userFields['id_user'];
        $this->request['budget_closed'] = $this->areaClosedFields['budget_closed']; //Estaba cerrada
        $this->request['total_budget_html'] = $mayorMonto;


        $form['year'] = $this->accountbudgetFields['budget_year'];
        $form['code'] = $this->accountbudgetFields['account_code'];
        $form['name'] = $this->accountbudgetFields['account_name'];
        $form['desc'] = $this->accountbudgetFields['description'];
        $form['amount'] = number_format($mayorMonto,0,',','.');

        $detail = array();
        array_push($detail, $form);

        $this->request['budgets'] = json_encode($detail);

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->controller->update($this->request);

        $this->seeInDatabase('areas', $this->areaFields);
        $this->seeInDatabase('account_budget', $this->accountbudgetFields);

        //A nivel de área no se ajustó nada
        $this->seeInDatabase('areas_budget', ['id_area' => $area->id_area, 'budget_year' => $this->accountbudgetFields['budget_year'],
            'total_budget_initial' => $budget->total_budget_initial, 'total_budget_available' => $budget->total_budget_available]);

        //Eliminar los datos
        $area = Area::findBy('short_name',$this->areaFields['short_name']);
        AccountBudget::deleteBudgets($area->id_area);
        AreasBudget::deleteBudgets($area->id_area);
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testUpdateClosedAreaToIncreaseBudgetIncorrectly "."\033[32m OK \033[0m ". "\n");

    }

    public function testUpdateClosedAreaToIncreaseBudgetCorrectly(){

        $user = new User(array('username' => 'Ana', 'id_user' => 10));
        $this->be($user);

        $user->detachRoles();
        $user->attachRole(config('constants.finanzas'));

        $this->saveAreaForSearch();
        /** @var Area $area */
        $area = Area::find($this->areaFields['id_area']);

        $this->request['budget_closed'] = "on"; //Cerrar el presupuesto del área después de agregar dos cuentas
        $this->addAreaWithAccounts($area, $this->areaFields['short_name']);

        unset($this->areaFields['id_area']);
        unset($this->accountbudgetFields['id_area']);
        $this->areaFields['budget_closed'] =$this->areaClosedFields['budget_closed'];

        //Se cerró el presupuesto
        $montoIni = $this->accountbudgetFields['total_budget_initial'] + $this->accountbudgetFields2['total_budget_initial'];
        $montoDisp = $this->accountbudgetFields['total_budget_available'] + $this->accountbudgetFields2['total_budget_available'];
        $this->seeInDatabase('areas', $this->areaFields);
        $this->seeInDatabase('account_budget', $this->accountbudgetFields);
        $this->seeInDatabase('account_budget', $this->accountbudgetFields2);
        $this->seeInDatabase('areas_budget', ['id_area' => $area->id_area, 'budget_year' => $this->accountbudgetFields['budget_year'],
            'total_budget_initial' => $montoIni, 'total_budget_available' => $montoDisp]);

        $budget = AreasBudget::getBudget($area->id_area, $this->accountbudgetFields['budget_year']);

        //Decrementamos el monto de la primera cuenta (en 10000)
        $montoCuenta1 = floatval($this->accountbudgetFields['total_budget_initial']) - 10000;
        $this->decreaseAccountBudget($area, 10000);
        $copyFields = $this->accountbudgetFields;
        $copyFields['total_budget_initial'] = $montoCuenta1;
        $copyFields['total_budget_available'] = floatval($copyFields['total_budget_available']) - 10000;
        $this->seeInDatabase('account_budget', $copyFields);

        //Queremos incrementar el presupuesto inicial de la segunda cuenta (teniendo el presupuesto cerrado para el área)
        $mayorMonto = floatval($this->accountbudgetFields2['total_budget_initial']) + 10000;

        //Setear campos en el request
        $this->request['id_area'] = $area->id_area;
        $this->request["short_name"] = $this->areaFields['short_name'];
        $this->request["long_name"] = $this->areaFields['long_name'];
        $this->request["manager_name"] = $this->areaFields['manager_name'];
        $this->request["manager_position"] = $this->areaFields['manager_position'];
        $this->request['id_user'] = $this->userFields['id_user'];
        $this->request['budget_closed'] = $this->areaClosedFields['budget_closed']; //Estaba cerrada
        $this->request['total_budget_html'] = $montoCuenta1 + 10000 ;

        $detail = array();

        $form['year'] = $this->accountbudgetFields['budget_year'];
        $form['code'] = $this->accountbudgetFields['account_code'];
        $form['name'] = $this->accountbudgetFields['account_name'];
        $form['desc'] = $this->accountbudgetFields['description'];
        $form['amount'] = number_format($montoCuenta1,0,',','.');

        array_push($detail, $form);

        $form['year'] = $this->accountbudgetFields2['budget_year'];
        $form['code'] = $this->accountbudgetFields2['account_code'];
        $form['name'] = $this->accountbudgetFields2['account_name'];
        $form['desc'] = $this->accountbudgetFields2['description'];
        $form['amount'] = number_format($mayorMonto,0,',','.');

        array_push($detail, $form);

        $this->request['budgets'] = json_encode($detail);

        $this->visit("/")->see("Sistema de Órdenes de compra");
        $this->click('Áreas');

        $this->see("Listado de Áreas");

        $this->controller->update($this->request);

        $this->seeInDatabase('areas', $this->areaFields);
        $this->seeInDatabase('account_budget', $copyFields);
        $this->accountbudgetFields2['total_budget_initial'] = $mayorMonto;
        $this->accountbudgetFields2['total_budget_available'] = floatval($this->accountbudgetFields2['total_budget_available']) + 10000;
        $this->seeInDatabase('account_budget', $this->accountbudgetFields2);

        //A nivel de área no se ajustó nada
        $this->seeInDatabase('areas_budget', ['id_area' => $area->id_area, 'budget_year' => $this->accountbudgetFields['budget_year'],
            'total_budget_initial' => $budget->total_budget_initial, 'total_budget_available' => $budget->total_budget_available]);

        //Eliminar los datos
        $area = Area::findBy('short_name',$this->areaFields['short_name']);
        AccountBudget::deleteBudgets($area->id_area);
        AreasBudget::deleteBudgets($area->id_area);
        $area->delete();

        $user = User::find($this->userFields['id_user']);
        $user->delete();

        fwrite(STDOUT,  "\033[32m \e[1m ✓ \033[35m AreasUnitTest:\033[0m testUpdateClosedAreaToIncreaseBudgetCorrectly "."\033[32m OK \033[0m ". "\n");

    }


}
